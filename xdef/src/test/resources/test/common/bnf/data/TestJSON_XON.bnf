/************************//*   XON  Basic rules   *//************************/AnyChar      ::= $UTFChar - '\' - '"'	Letter       ::= $letter	AsciiChar    ::= [ -~]WhiteSpace   ::= [#9#10#13 ]LWS          ::= [#9 ]+ /* linear white spaces */Comment ::= "/*" ([^*]+ | "*" - "*/")* "*/"B64text      ::= ((S | [-a-zA-Z0-9+/])+ '='? S? '='? S?) /* base64 */CharsetName ::= ([a-zA-Z] ('-'? [a-zA-Z0-9]+)*) $rule S ::= (WhiteSpace | Comment)+ /* Sequence of whitespaces or comments */IntPart      ::= [0-9] [0-9]*HexDigit     ::= [0-9] | [a-fA-F]SignedInteger::= '-'? ('0' | [1-9] [0-9]*)Exponent     ::= ('e' | 'E') ('+' | '-')? IntPartFloatPart    ::= '.' IntPart Exponent? | ExponentFloatNumber  ::= SignedInteger FloatPartNumber       ::= (SignedInteger | FloatNumber)/***********************//*    Date and time    *//***********************/yearFrag     ::= '-'? [0-9]*monthFrag    ::= '0' [1-9] | '1' [0-2]dayFrag      ::= '0' [1-9] | [12] [0-9] | '3' [01]hourFrag     ::= [01] [0-9] | '2' [0-3]minuteFrag   ::= [0-5] [0-9]secondFrag   ::= ([0-5] [0-9]) ('.' [0-9]+)?endOfDayFrag ::= '24:00:00' ('.' '0'+)?timezoneFrag ::= 'Z' | ('+' | '-') (('0' [0-9] | '1' [0-3])                 (':' minuteFrag )? | '14:00' | ('0' [0-9] | '1' [0-3]) [0-5] [0-9] | '1400')dateFrag     ::= yearFrag | yearFrag '-' monthFrag ('-' dayFrag)?                 | '--' monthFrag | '--' monthFrag '-' dayFrag | '---' dayFragdate         ::= 'd' (yearFrag '-' monthFrag ('-' dayFrag)? timezoneFrag?                 | yearFrag timezoneFrag? | '--' monthFrag timezoneFrag?                 | '--' monthFrag '-' dayFrag timezoneFrag? | '---' dayFrag timezoneFrag?)timeFrag     ::= ( (hourFrag ':' minuteFrag ':' secondFrag) | endOfDayFrag )                 | (hourFrag ':' minuteFrag)time         ::= 'd' timeFrag timezoneFrag?dateTime     ::= 'd' dateFrag 'T' (timeFrag | endOfDayFrag) timezoneFrag?/******************//*    Duration    *//******************/duYearFrag   ::= [0-9]+ 'Y'duMonthFrag  ::= [0-9]+ 'M'duDayFrag    ::= [0-9]+ 'D'duHourFrag   ::= [0-9]+ 'H'duMinuteFrag ::= [0-9]+ 'M'duSecondFrag ::= [0-9]+ ('.' [0-9]+)? 'S'duYMonthFrag ::= (duYearFrag duMonthFrag?) | duMonthFragduTimeFrag   ::= 'T' ((duHourFrag duMinuteFrag? duSecondFrag?) | (duMinuteFrag duSecondFrag?)                 | duSecondFrag)duDayTimeFrag::= (duDayFrag duTimeFrag?) | duTimeFragDuration     ::= '-'? 'P' ((duYMonthFrag duDayTimeFrag?) | duDayTimeFrag)/********************//*    Byte array    *//********************/Bytes        ::= 'b(' B64text? ')'/**********************//*    GPS location    *//**********************/BPSName      ::= ('_' | Letter)+ ([- _.,/0-9] | Letter)*GPS          ::= 'g(' Number ',' ' '? Number (',' ' '? Number)? (',' ' '? (BPSName|String) )? ')'/******************//*    Currency    *//******************/Currency     ::= 'C('[A-Z]{3}')'/***************//*    Price    *//***************/Price        ::= 'p(' IntPart FloatPart? ' ' [A-Z]{3}')'/***********************//*    Email address    *//***********************/CommentList  ::= ( '(' CommentPart* ')' (LWS? '(' CommentPart* ')')* )CommentPart  ::= (AsciiChar - [()])+ (LWS? CommentList)?EmailComment ::= LWS? ( CommentList $rule) LWS?Atom         ::= ([-0-9a-zA-Z_])+Domain       ::= '@' Atom ('.' Atom)*LocalPart    ::= Atom ('.' Atom)*EmailAddr    ::= LocalPart DomainEnclosedEmail::= '<' EmailAddr '>' Ptext        ::= ((AsciiChar - [@><()=])+)EText        ::= ((EmailComment* (TextItem | EmailComment)*)                 | EmailComment* LWS? Ptext)? EmailComment*HexOctet     ::= '=' [0-9A-F] [0-9A-F]Qtext        ::= ((HexOctet | AsciiChar - [=?])+)/*quoted*/TextItem     ::= LWS? '=?' CharsetName '?' ('Q?' Qtext | 'B?' B64text) '?='Email        ::= 'e"' ( (EText? LWS? EnclosedEmail                 | (EmailComment* EmailAddr)) (LWS? EmailComment)* ) '"'/*************//*    URI    *//*************/SchemeName   ::= [a-zA-Z]+ '://'URI          ::= 'u"' SchemeName AnyChar+ '"'/****************//*    IPAddr    *//****************/IPv4part      ::= '2' [0-5] [0-9] | [0-1] [0-9] [0-9] | [0-9]{1,2}IPv4          ::= IPv4part ('.' IPv4part) {3}IPv6part      ::= HexDigit {1,4}IPv6          ::= IPv6part (':' IPv6part) {7}IPAddr        ::= '/' (IPv6 | IPv4)/*******************//*    Character    *//*******************/Char         ::= 'c"' StringPart '"'/****************//*    String    *//****************/UTFChar      ::= '\u' HexDigit {4} /*hexadecimal specification of char*/StringPart   ::= '\\' | '\"' | '\n' | '\r' | '\t' | '\f' | '\b' | UTFChar | AnyCharString       ::= '"' StringPart* '"'/******************//*    Boolean    *//******************/Boolean      ::= 'true' | 'false'/**************//*    Null    *//**************/Null         ::= 'null'/************************//*    Numeric values    *//************************/Byte         ::= SignedInteger 'b'Short        ::= SignedInteger 's'Integer      ::= SignedInteger 'i'Long         ::= SignedInteger 'l' ?BigInteger   ::= SignedInteger 'N' "l" ?Decimal      ::= SignedInteger 'D' | FloatNumber 'D'Float        ::= SignedInteger 'f' | FloatNumber 'f' | 'NaNf' | '-'? 'INFf'Double       ::= SignedInteger 'd' | FloatNumber 'd'? | 'NaN' | '-'? 'INF'XonNumber    ::= Double | Float | Decimal | Byte | Short | Integer | BigInteger | Long/***********************//*    Simple values    *//***********************/SimpleValue ::= S? (Null | Boolean | String | XonNumber | dateTime | time | date | Duration                | Bytes | Char | URI | IPAddr | Email | GPS | Currency | Price)/********************//*    XON values    *//********************/Array        ::= S? '[' (XonValue (S? ',' XonValue)*)? S? ']'NCName       ::= ('_' | Letter) ([-_.0-9] | Letter)*NamedValue   ::= S? (NCName | String) S? ':' XonValueMap          ::= S? '{' (NamedValue (S? ',' NamedValue)* )?  S? '}'XonValue     ::= Array | Map | SimpleValue/*****************//*    XON data   *//*****************/Directive    ::= '%encoding' S? '=' S? '"' CharsetName '"'xon          ::= Directive? XonValue S?