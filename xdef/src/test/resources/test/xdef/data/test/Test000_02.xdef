<?xml version="1.0" encoding="windows-1250" ?>
<xd:collection xmlns:xd="http://www.syntea.cz/xdef/3.1">
<xd:def xd:name="test1">
 <xd:declaration>
<![CDATA[
  external method String test.xdef.Test000.b(XXNode, XDValue[]);
  Bytes b = new Bytes(16);
  boolean rodneCislo() {
    String s = getText();
    int rok = parseInt(s.substring(0,2));
    int mesic = parseInt(s.substring(2,4));
    if ((mesic < 1) || ((mesic > 12) && (mesic < 51)) || (mesic > 62)) {
      return error("MYERR01",
        "Error detected by external check method: &{msg}",
        "&{msg}RC - mesic:" + mesic);
    }
    int den = parseInt(s.substring(4,6));
    if ((den < 1) || (den > 31)) {
      return error("MYERR02",
        "Error detected by external check method: &{msg}",
        "&{msg}RC - mesic:" + mesic);
    }
    int i = 6;
    if (s.substring(i, i + 1) == '/') {
      i++;
      if (s.substring(i, i + 1) == 'C')
         return true; /*cizinec*/
    }
      int n = parseInt(s.substring(i));
      if (s.length() > i + 3) {
        int mod =  n % 10;
        int num = rok*10000000+mesic*100000+den*1000+(n/10);
        if (num % 11 != mod) {
           return error("MYERR03",
              "Error detected by external check method: &{msg}",
              "&{msg}RC - CRC");
        }
    }
    return true;
  }

  boolean skodaTisice() {
    String s = getText();
    int ndx = s.indexOf(',');
    int x;
    boolean parsedError = false;
    if (ndx < 0) {
       x = parseInt(s);
       parsedError = x == $MININT;
    } else {
       x = parseInt(s.substring(0, ndx));
       parsedError = x == $MININT;
       x = parseInt(s.substring(ndx + 1));
       parsedError |= x == $MININT;
    }
    if (parsedError) {
       return error("XDEF532",
         "Error detected by external check method: &{msg}",
         "&{msg}skodaTisice: " + s);
    }
      return true;
  }

  Element myErr(int code) {
    return getElement();
  }
]]>
 </xd:declaration>
</xd:def>
<xd:def xd:root="a" xd:name="test">
 <a xd:script = "
    var{
        int iii = 1;
        uniqueSet id1 {t: string()};
        int jjj = 2;
        type cislo int();
        uniqueSet id2 {t: cislo;}
        type datum xdatetime('d. M. yyyy[ HH:mm[:ss]]');
        uniqueSet id3 {t: xdatetime('yyyyMMddHHmmss')}
      }
      finally {
      id1.CLEAR();
      for (int i = 0; i LT b.size(); i++) {
        b.setAt(i,i);
      }
      b.setAt(0,255);
      b.add(11);
      b.remove(15);
      int i = b.size();
      outln(b(b,'abc', false, i, 4.56));
      b.remove(10,5);
      outln(b(b, b.size()));
      b.remove(0,5);
      outln(b(b, b.size()));
      b.remove(0,1);
      outln(b(b, b.size()));
      b.remove(4,1);
      outln(b(b, b.size()));
      b.remove(2,100);
      outln(b(b, b.size()));
      b.remove(2,100);
      outln(b(b, b.size()));
      b.remove(0,100);
      outln(b(b, b.size()));
      b.add(123);
      b.add(456);
      b.insert(0,0);
      b.insert(2,2);
      b.insert(4,4);
      outln(b(b, b.size()));
      b.clear();
      outln(b(b, b.size()));
      outln(b());
    }"
    rc = "required rodneCislo()" >
   <b a = "optional id1.t.IDREF()"
      b = "optional cislo();"
      c = "optional datum();"/>
   <c xd:script = "occurs 1..; finally id2.CLEAR()"
     stamp = "required id3.t.ID()" >
     <d xd:script = "occurs 1.."
        a1 = "required id1.t.ID()"
        a2 = "optional id2.t.ID()"/>
     <e a3 = "required id2.t.IDREF()"/>
   </c>
   <f a4 = "required id1.t.IDREF()" a5 = "optional id3.t.IDREF()"/>
 </a>
</xd:def>
</xd:collection>