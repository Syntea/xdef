<?xml version="1.0" encoding="utf-8"?>
<xd:collection
    xmlns:xd     = "http://www.syntea.cz/xdef/3.1"
    xmlns        = "http://www.syntea.cz/ISDN/SOD/2.0"
    xmlns:sod    = "http://www.syntea.cz/ISDN/SOD/2.0"

    impl-version = "2.0"
    impl-date    = "2014-05-14"
>

<xd:def xd:name  = "SODContainer_Template"
    xd:root      = "SODContainer"
    xd:script    = "options ignoreAttrWhiteSpaces, ignoreTextWhiteSpaces"
>
    <SODContainer xd:script="ref SODContainer#SODContainer; init $phase = 'Template';"/>
</xd:def>



<xd:def
    xd:name      = "SODContainer"
    xd:root      = "SODContainer"
    xd:script    = "options ignoreAttrWhiteSpaces, ignoreTextWhiteSpaces"
>

<xd:declaration>
    String      $phase;         /* pozadovana faze k validaci */

    type phase enum('Template','Query','Report');  /* 3 fáze pro SODContainer */

    type dimension  enum(
            'Row',              /* dimenze pro řádky */
            'Col'               /* dimenze pro sloupce */
        );

    type ctype enum(            /* pozn.: "formát" je formát textové reprezentace v Const/@Value */
            'int',              /* celé číslo,      formát: číslo v 10-kové soustava */
            'double',           /* desetiné číslo s plovoucí čárkou, formát: číslo v 10-kové soustava */
            'datetime',         /* datum a čas,     formát: ${DateTimeDesc} */
            'date',             /* datum bez času,  formát: ${DateDesc} */
            'bool',             /* logická hodnota, formát: "false", "true" - v db: int (0    -> false, 1 -> true) */
            'booli',            /* logická hodnota, formát: "false", "true" - v db: int (null -> false, 1 -> true)
                                   v rámci SOD plně kompatibilní s typem 'bool',
                                   může se vyskytnout jen u elementu Fact */
            'string'            /* řetězec */
        );

    type operator enum(                                     /* pozn.: "any" je libovolný typ */
            'and',                                          /* logický operátor AND -  0, 1 a více-četný - (bool, ...) -> bool
                                                               0-ární má hodnotu "true" */
            'or',                                           /* logický operátor OR  -  1 a více-četný - (bool, ...) -> bool */
            '=', '!=', '&lt;', '&lt;=', '&gt;', '&gt;=',    /* logické operátory porovnavaci - (any, any) -> bool */
            'in',                                           /* logické operátor in - (any, (any, ...)) -> bool
                                                               první argument je testovaný argument,
                                                               druhý argumenty je seznam, tj. seznam možností */
            '+',                                            /* číselný operátor unární, binární, vícečetný
                                                               řetězcový operátor spojení binární, vícečetný */
            '*',                                            /* číselné operátory binární, vícečetné */
            '-',                                            /* číselné operátory unární, binární */
            '/',                                            /* číselné operátory binární */
            '()',                                           /* číselné operátory unární */
            'count', 'sum', 'max', 'min'                    /* funkce agregační */
        );

    type modifier enum(
            'distinct'                                      /* modifikátor k agregačním funkcím count, sum */
        );

    type label enum(
            'Faulty',               /* viz kapitola "Štítek 'Faulty'" */
            'PossibleExeError',     /* viz kapitola "Štítek 'PossibleExeError'" */
            'Fixed',                /* označuje volitelný prvek, který je pevně daný. Uživatel jej nemůže měnit,
                                       ani žádnou jeho podčást. Tato vlastnost se nepřenáší přes odkazy
                                       v podelementech */
            'UserScope',            /* pro Expression: značka pro automaticky doplňovanou podmínku
                                       pro uzemní působnost zadavatele */
            'AggregationTemplate',  /* pro Expression, List: výraz/y je/jsou agregační funkce.
                                       Je-li to volitelný prvek vybírá se z předdefinovaných
                                       agregací pro daný vektor */
            'AggregationTemplateCode', /* pro Expression: příslušný výraz byl vybrán z předdefinovaných
                                       agregací s kódem v hodnotě tohoto štítku */
            'Separator',            /* pro List: znak pro oddělovač, default je ', ' */
            'SelectColumns',        /* pro List: seznam je seznamem sloupců v select-sql-části */
            'CountMin',             /* pro List: minimální počet položek. Defaultní hodnota je 1. */
            'CountMax',             /* pro List: maximální počet položek. Defaultní hodnota je not-available */
            'DefaultValue',         /* pro Query, Dimension: defaultní hodnota pro políčko v tabulce.
                                       Defaultní hodnota je '0'. Více viz Dimension/@Attribute */
            'Alias',                /* pro Vector: nastaví alias pro příslušný vektor, který se
                                       použije při přepisu svázaného faktu na sloupec */
            'Author',               /* jen v top Info: autor dotazu/šablony */
            'CreationDate',         /* jen v top Info: datum a čas poslední UI-editace dotazu
                                       nebo importu globální šablony */
            'IdentificationNumber', /* jen v top Info (tj. SODContainer/Info): identifikační číslo z UI.
                                       Globální šablona tento štítek nemá */
            'OriginTemplateTitle'   /* jen v top Info: popis původní globální šablony, ze kterého dotaz vznikl.
                                       Globální šablona tento štítek nemá */
        );

    type faulty                /* hodnoty štítku 'Faulty' */
        enum('Invalid');       /* příslušný element je neplatný */

    type possibleExeError       /* hodnoty štítku 'PossibleDBError' */
        enum('CommonError');    /* při výpočtu příslušného sql-dotazu může dojít k chybě */


    /* id-ref typy pro jednotlive elementy */
    uniqueSet constRefTyp {t: string()};
    uniqueSet factRefTyp {t: string()};
    uniqueSet vectorRefTyp {t: string()};
    uniqueSet shotRefTyp {t: string()};
    uniqueSet exprRefTyp {t: string()};
    uniqueSet listRefTyp {t: string()};

</xd:declaration>

<xd:macro name="DateTimeMsDesc">xdatetime('yyyy-MM-dd HH:mm:ss.S')</xd:macro>
<xd:macro name="DateTimeDesc"  >xdatetime('yyyy-MM-dd HH:mm:ss')</xd:macro>
<xd:macro name="DateDesc"      >xdatetime('yyyy-MM-dd')</xd:macro>

<!-- hlavní kontejner -->
<SODContainer
    Phase    ="phase(); onTrue if (getText() != $phase) { error('SODE0101', 'SODContainer/@Phase != \'' + $phase + '\'') }"
>
    <xd:choice>
        <OperatorQuery  xd:script="ref OperatorQuery"/>
        <Query          xd:script="ref Query"/>
    </xd:choice>
    <Info               xd:script="ref Info"/>
</SODContainer>

<!--
operátor nad celými dotazy, respektive tabulkami, které jsou výsledkem dotazu.
@Operator="join": spojení více dotazů do jednoho výstupu
    @Kind:
        - concatenate - textové spojení dvou popisů+tabulek za sebe
        - attach      - slepení zvlášť popisů a zvlášť tabulek (do jedné tabulky) za sebe
        - merge       - slepení popisů  za sebe a prolnutí zipem tabulek do sebe
    @Direction: směr spojení
@Operator="sort": utřídí řádky/sloupce podle prvního sloupce/řádku, a to na všech úrovních
    @Kind:
        - ascending  - vzestupně
        - descending - sestupně
    @Direction: směr třídění
-->
<OperatorQuery
    Operator ="enum('join', 'sort')"
    Kind     ="optional enum('concatenate', 'attach', 'merge', 'ascending', 'descending')"
    Dimension="optional dimension()"
>
    <xd:mixed>
        <OperatorQuery      xd:script="ref OperatorQuery; occurs *"/>
        <Query              xd:script="ref Query;         occurs *"/>
        <Form               xd:script="ref Form;          occurs *"/>
    </xd:mixed>
    <Info                   xd:script="ref Info; optional"/>
</OperatorQuery>



<!-- jednoduchý dotaz -->
<Query>
    <Command    xd:script="ref Command"/>
    <Dimension  xd:script="ref Dimension; occurs 0..2"/>
    <Form       xd:script="ref Form; optional"/>
    <Info       xd:script="ref Info; optional"/>

    <!-- spočítaná data. Seznam položek s dimenzemi řádek/sloupec a hodnotou/ami.
    Typicky @Row, @Col, @Value -->
    <Data       xd:script="optional; onAbsence if ($phase == 'Report') { error('SODE0102', 'chybí Query/Data') };
                                     finally   if ($phase != 'Report') { error('SODE0103', 'nepovolený výskyt Query/Data') }"
    >
        <Item   xd:script="occurs *"
                xd:attr  ="string(0, 1000)"
        />
    </Data>
</Query>

<!-- xml-text-předpis pro příkaz. Po přepisu vznikne textový příkaz, který se
při výpočtu pošle k vykonání do výkoného systému -->
<Command>
    <xd:sequence xd:script="ref expression"/>
</Command>

<!--
!!!nejspíš se hodně změní!!!

specifikace dimenze a jeho položek. Běžná položka se skládá z kódu a jeho příslušného textu.
Přes kód se pak svazuje s položkou v datech, tj. Query/Data.
Položky zachovávají pořadí v tomto elementu.
Dimenze může být víceúrovňová, pak se zobrazí kaskádově.
    @Dimension - jméno dimenze. 'Row' - dimenze řádků, 'Col' - dimenze sloupců.
                 Nižší úrovně tento atribut neobsahují.
    @Attribute - určuje jméno atributu v Data/Item spřažený s touto dimenzí, tj. filtrují se
                 ty položky Data/Item, které mají v atributu se jménem Dimension/@Atribute stejnou
                 hodnotu jako Dimension/Item/@Code. Po filtraci ze všech dimenzí musí zbýt
                 kvůli jednoznačnosti maximálně jen jedna Data/Item.
                 Pak se do příslušného políčka tabulky vloží hodnota
                 v atributu Data/Item/@Value. Je-li hodnota @Atribute prázdný řetězec, pak se
                 pro tuto dimenzi neprovádí filtrace, ale hodnota se vezme z atributu se jménem v @Code,
                 tj. Data/Item/@*[name = @Code] místo výše uvedené Data/Item/@Value.
                 Proto @Attribute="" může být ve všech dimenzích uveden maximálně jednou.
                 Nezbyde-li  po filtraci žádná Data/Item použije se
                 do příslušného políčka tabulky defaultní hodnota, viz Label.
                 Není-li uveden a je-li @Dimension uveden, předpokládá se stejná
                 hodnota jako u @Dimension.
                 Není-li uveden @Attribute, ani @Dimension, je to chyba.
-->
<Dimension
    Dimension="optional dimension()"
    Attribute="optional string(0, 1000)"
>
    <xd:choice  xd:script="occurs *">
        <!-- běžná položka s kódem a příslušným textem -->
        <Item       Code     ="string">optional string</Item>
        <!-- zda přidat řádek/sloupec se součtem na tuto pozici v dimenzi -->
        <Sum        xd:script="ref Sum"/>
        <!-- nahrazuje se hodnotami z číselníku příslušnému k tomuto faktu -->
        <Fact       xd:script="ref Fact"/>
        <!-- musí mít @Id (po nahrazení @Ref) (předpokládejme např. hodnotu "Value"),
             pak se nahrazuje:
             <Item Code="Value1">{List/*[1]/Info/Title}</Item>
             <Item Code="Value2">{List/*[2]/Info/Title}</Item>
             ...
        -->
        <List       xd:script="ref List"/>
        <!-- nižší úroveň položek této dimenze, jako po operaci "kartézský součin".
        Může být celkově jen jedna -->
        <Dimension  xd:script="ref Dimension"/>
    </xd:choice>
</Dimension>

<!-- zda přidat řádek/sloupec se součtem, musi platit Sum/Const/@Type == 'bool' -->
<Sum>
    <Const xd:script="ref Const"/>
</Sum>

<!-- seznam volitelných položek, viz kapitola "Volitelná položka" -->
<Form>
    <xd:choice xd:script="occurs *">
        <Const      xd:script="ref Const"/>
        <Fact       xd:script="ref Fact"/>
        <Vector     xd:script="ref Vector"/>
        <Shot       xd:script="ref Shot"/>
        <Expression xd:script="ref Expression"/>
        <List       xd:script="ref List"/>
    </xd:choice>
</Form>

<!--
stromová struktura výrazu
  - povoluje i textově reprezentované podvýrazy
  - např. sql-příkaz
  - výrazy pod <Form>, kromě těch se štítkem AggregationTemplate, mohou obsahovat jen tzv. strukturované výrazy,
    tj. výrazy bez string(), <Vector>, <Shot>
-->
<xd:sequence xd:name="expression">
    <xd:choice xd:script="occurs +">
        <!-- přepíše se textovou podobou hodnoty konstanty v sql -->
        <Const              xd:script="ref Const"/>
        <!-- přepíše se názvem příslušného sloupce v db-tabulce vektoru s případnou značkou SqlAlias -->
        <Fact               xd:script="ref Fact"/>
        <!-- přepíše se názvem příslušné db-tabulky -->
        <Vector             xd:script="ref Vector"/>
        <!-- přepíše se kódem snímku (vloží se jako sql-parametr) -->
        <Shot               xd:script="ref Shot"/>
        <!-- operátor nebo funkce -->
        <Operator
            Operator="required operator()"
            Type    ="required ctype()"
        >
            <!-- operandy operátoru -->
            <xd:sequence    xd:script="ref expression; occurs *"/>
            <Modifier       xd:script="ref Modifier;   optional"/>
            <Info           xd:script="ref Info;       optional"/>
        </Operator>
        <!-- výraz -->
        <Expression         xd:script="ref Expression"/>
        <!-- seznam výrazů -->
        <List               xd:script="ref List"/>
        <!-- textová podoba výrazu -->
        <xd:text>string()</xd:text>
    </xd:choice>
</xd:sequence>

<!-- skalární konstanta -->
<Const
    Id       ="optional constRefTyp.t.ID()"
    Ref      ="optional constRefTyp.t.IDREF()"
    Value    ="optional string(0, 4000); options preserveAttrWhiteSpaces"
    Type     ="optional ctype()"
    xd:script="finally if (toString(xpath('count(@Ref)')) == '0') {
        if (toString(xpath('count(@Type)'))  == '0') { error('SODE0104', 'chybí Const/@Type') };
        if ($phase != 'Template') {
            if (toString(xpath('count(@Value)'))  == '0') { error('SODE0105', 'chybí Const/@Value') };
        }
    }"
>
    <Info xd:script="ref Info; optional"/>
</Const>

<!-- fakt ve vektoru -->
<Fact
    Id                          ="optional factRefTyp.t.ID()"
    Ref                         ="optional factRefTyp.t.IDREF()"
    KodNdnStatVektorStructure   ="optional string"
    KodNdnStatVektorStructure2  ="optional string"
    Type                        ="optional ctype()"
    xd:script="finally if ($phase != 'Template' AND toString(xpath('count(@Ref)')) == '0') {
        if (toString(xpath('count(@KodNdnStatVektorStructure)'))  == '0') { error('SODE0106', 'chybí Fact/@KodNdnStatVektorStructure') };
        if (toString(xpath('count(@KodNdnStatVektorStructure2)')) == '0') { error('SODE0107', 'chybí Fact/@KodNdnStatVektorStructure2') };
        if (toString(xpath('count(sod:Vector)'))                  == '0') { error('SODE0108', 'chybí Fact/Vector') };
    }"
>
    <!-- příslušný vektor v dotazu - měla by to být kopie jednoho z ./Info/Vector -->
    <Vector         xd:script="ref Vector; optional"/>
    <Info           xd:script="ref Info;   optional"/>
</Fact>

<!-- vektor -->
<Vector
    Id                          ="optional vectorRefTyp.t.ID()"
    Ref                         ="optional vectorRefTyp.t.IDREF()"
    KodNdnStatVektorStructure   ="optional string"
    xd:script="finally if ($phase != 'Template' AND toString(xpath('count(@Ref)')) == '0') {
        if (toString(xpath('count(@KodNdnStatVektorStructure)'))  == '0') { error('SODE0109', 'chybí Fact/@KodNdnStatVektorStructure') };
    }"
>
    <Info           xd:script="ref Info; optional"/>
</Vector>

<!-- snímek -->
<Shot
    Id              ="optional shotRefTyp.t.ID()"
    Ref             ="optional shotRefTyp.t.IDREF()"
    KodSnimek       ="optional string"
    PlatnostDatKMin ="optional xdatetime('yyyy-MM-dd HH:mm:ss')"
    xd:script="finally if ($phase != 'Template' AND toString(xpath('count(@Ref)')) == '0') {
        if (toString(xpath('count(@KodSnimek)')) == '0') { error('SODE0110', 'chybí Fact/@KodSnimek') };
    }"
>
    <Info           xd:script="ref Info; optional"/>
</Shot>

<!-- výraz, viz <xd:sequence xd:name="expression">
    TODO: do budoucna: @Type je nepovinný pro výraz se štítkem AggregationTemplate
-->
<Expression
    Id      ="optional exprRefTyp.t.ID()"
    Ref     ="optional exprRefTyp.t.IDREF()"
    Type    ="optional ctype()"
    xd:script="finally if (toString(xpath('count(@Ref)')) == '0') {
        if (toString(xpath('count(@Type)'))  == '0') { error('SODE0111', 'chybí Expression/@Type') };
        if ($phase != 'Template' AND toString(xpath('count(*[not(self::sod:Info)])')) == '0')
            { error('SODE0112', 'chybí Expression/expression') };
    }"
>
    <xd:sequence    xd:script="ref expression; optional"/>
    <Info           xd:script="ref Info;       optional"/>
</Expression>

<!--
seznam výrazů. Přepíše se jako seznam výrazů oddělených separátorem v Label="Separator".

Pokud je nastaven Label="SelectColumns", musí mít @Id (předpokládejme např. @Id="Value" a
defaultní oddělovač ", "), pak se přepíše na:
    [přepis výrazu [1]] as Value1, [přepis výrazu [2]] as Value2, ...
-->
<List
    Id      ="optional listRefTyp.t.ID()"
    Ref     ="optional listRefTyp.t.IDREF()"
>
    <xd:sequence    xd:script="ref expression; occurs *"/>
    <Info           xd:script="ref Info;       optional"/>
</List>

<!-- modifikátor některých funkcí -->
<Modifier Modifier="modifier()"/>

<!-- doplňkové informační prvky příslušných elementů -->
<Info>
    <xd:mixed>
        <!-- textový titulek příslušného elementu -->
        <Title xd:script="optional">
            optional string
        </Title>

        <!-- štítky, reprezentuje dvojici klíč-hodnota jako meta-informace, viz label() -->
        <Label      xd:script="occurs *" Key="label()">optional string</Label>
        <!-- vektor, ke kterému se vztahuje příslušný element. Může jich být více, pak se sjednocují.
        Pro Fakt, Expression, List určuje vektor pro volené fakty.
        Pro Vektor určuje seznam volitelných vektorů. -->
        <Vector     xd:script="ref Vector; occurs *"/>

        <!-- informace o výpočtu sql-příkazu -->
        <Execution  xd:script="optional; finally if ($phase != 'Report') { error('SODE0115', 'nepovolený výskyt Info/Execution') }">
            <!-- použitý sql-příkaz -->
            <Sql>string</Sql>
            <!-- čas běhu: od-do -->
            <DateFrom>${DateTimeMsDesc}</DateFrom>
            <DateTo  >${DateTimeMsDesc}</DateTo>
            <!-- informace z DB o použitých snímcích; jen pro různé Query/Command//Shot -->
            <ShotInfo xd:script="occurs *"
                KodSnimek       ="string"
                Text            ="string(0, 4000)"
                PlatnostOd      ="${DateTimeDesc}"
                PlatnostDo      ="${DateTimeDesc}"
                PlatnostDatK    ="${DateTimeDesc}"
                GenDatumOd      ="${DateTimeDesc}"
                GenDatumDo      ="${DateTimeDesc}"
            />
        </Execution>
    </xd:mixed>
</Info>

</xd:def>

</xd:collection>