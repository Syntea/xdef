<?xml version="1.0" encoding="utf-8"?>
<!--==================================================================-->
<!--    XDEF pro Bpel verze 2.0 23 srpen                              -->
<!--                                                                  -->
<!--    Xdef je specifikovana pro cely Bpel                           -->
<!--    Nejsou uvedeny specifikace pro WSDL rozsireni BPelu           -->
<!--                                                                  -->
<!--    Nepresnosti popisu Bpelu:                                     -->
<!--    Nepresne je specifikovan prikaz ASSIGN                        -->
<!--    nezajistene bui je tento atribut i jine (Choise na atributy)  -->
<!--==================================================================-->

   <!--======================================-->
   <!-- Dosud Realizovane metody pro BPEL   -->
   <!--                                      -->
   <!-- QName    ()   ->                     -->
   <!-- NCName   ()   ->                     -->
   <!-- QNameList()   ->                     -->
   <!-- NCNameList()  ->                     -->
   <!--======================================-->
   <!--======================================-->
   <!-- Dosud nerealizovane metody pro BPEL  -->
   <!--                                      -->
   <!-- boolExpr ()   ->                     -->
   <!-- QNameList()   ->                     -->
   <!-- durationExpr()->                     -->
   <!-- deadlineExpr()->                     -->
   <!--======================================-->

<xd:def   xmlns:xd='http://www.syntea.cz/xdef/3.1'
          impl-version ='0.9.0.0" impl-date="20.10.2006'
          xmlns:bl     ='http://www.syntea.cz/xbpel/'
          xd:name      ='Example'
          xd:root      ='Example'>


   <!--======================================-->
   <!-- Macra  Funkce                        -->
   <!--======================================-->
<xd:macro name = "anyUri">string()</xd:macro>
<xd:macro name = "BooleanExpr">string()</xd:macro>
<xd:macro name = "IntExpr">string()</xd:macro>
<xd:macro name = "IntegerUnsignedExpr">string()</xd:macro>
<xd:macro name = "DurationExpr">string()</xd:macro>
<xd:macro name = "DeadlineExpr">string()</xd:macro>
<xd:macro name = "QueryExpr">string()</xd:macro>
<xd:macro name = "Expression">string()</xd:macro>
<xd:macro name = "Literal">string()</xd:macro>

   <!--======================================-->
   <!-- process                              -->
   <!--======================================-->
<Example name                = "required NCName ()"
         xd:script = "onStartElement outln('Example - start'); finally  outln('Example - end');"
         targetNamespace     = "required uri()"
         queryLanguage       = "optional uri()"
         expressionLanguage  = "optional uri()"
         suppressJoinFailure = "optional enum('yes','no')"
         exitOnStandardFault = "optional enum('yes','no')">

   <extensions          xd:script = "occurs 0..1;  ref extensions" />
   <import              xd:script = "occurs 0.. ;  ref import" />
   <partnerLinks        xd:script = "occurs 0..1;  finally  outln('partnerLinks');  ref partnerLinks" />
   <messageExchanges    xd:script = "occurs 0..1;  ref messageExchanges" />
   <variables           xd:script = "occurs 0..1;  ref variables" />
   <correlationSets     xd:script = "occurs 0..1;  ref correlationSets" />
   <faultHandlers       xd:script = "occurs 0..1;  ref faultHandlers" />
   <compensationHandler xd:script = "occurs 0..1;  ref compensationHandler" />
   <eventHandlers       xd:script = "occurs 0..1;  ref eventHandlers" />

   <xd:choice ref = "Activity"/>

</Example>
   <!--======================================-->
   <!-- Macra BPEL Objekty                   -->
   <!--                                      -->
   <!-- ${BPELVariableName}                  -->
   <!--                                      -->
   <!--                                      -->
   <!--                                      -->
   <!--======================================-->
<xd:macro name = "BPELVariableName">NCName ()</xd:macro>

   <!--======================================-->
   <!-- Std Modely                           -->
   <!--======================================-->
<condition       expressionLanguage = "optional uri()"
                 xd:script = "onStartElement out('('); finally out(')');">
                 required ${BooleanExpr}; finally out(getText());
</condition>

<CounterValue    expressionLanguage = "optional uri()">
                 required ${IntExpr}
</CounterValue>

<target           linkName = "required NCName ()"/>

<sources>
     <source            xd:script = "occurs 1.." />
</sources>

<targets>
     <joinCondition     xd:script = "occurs 0..1; ref condition" />
     <target            xd:script = "occurs 1..;  ref target" />
</targets>

<source          linkName = "required NCName ()">
     <transitionCondition xd:script ="occurs 0..1; ref condition" />
</source>

   <!--======================================-->
   <!-- StdActivity                          -->
   <!--======================================-->
<StdActivity
         name ="optional NCName()"
         suppressJoinFailure="optional enum('yes','no')">

        <sources        xd:script ="occurs 0..1; ref sources" />
        <targets        xd:script ="occurs 0..1; ref targets" />

</StdActivity>

   <!--======================================-->
   <!-- Activity                             -->
   <!--======================================-->
<xd:choice name = "Activity" >
 <assign            xd:script = "occurs 1;  ref assign" />
 <empty             xd:script = "occurs 1;  ref empty" />
 <exit              xd:script = "occurs 1;  ref exit" />
 <extensionActivity xd:script = "occurs 1;  ref extensionActivity" />
 <flow              xd:script = "occurs 1;  ref flow" />
 <forEach           xd:script = "occurs 1;  ref forEach" />
 <if                xd:script = "occurs 1;  ref if" />
 <invoke            xd:script = "occurs 1;  ref invoke" />
 <pick              xd:script = "occurs 1;  ref pick" />
 <receive           xd:script = "occurs 1;  ref receive" />
 <reply             xd:script = "occurs 1;  ref reply" />
 <sequence          xd:script = "occurs 1;  ref sequence" />
 <throw             xd:script = "occurs 1;  ref throw" />
 <scope             xd:script = "occurs 1;  ref scope" />
 <repeatUntil       xd:script = "occurs 1;  ref repeatUntil" />
 <validate          xd:script = "occurs 1;  ref validate" />
 <wait              xd:script = "occurs 1;  ref wait" />
 <while             xd:script = "occurs 1;  ref while" />
</xd:choice>

<xd:mixed name = "Activities" >
 <assign            xd:script = "occurs *;  ref assign" />
 <empty             xd:script = "occurs *;  ref empty" />
 <exit              xd:script = "occurs *;  ref exit" />
 <extensionActivity xd:script = "occurs *;  ref extensionActivity" />
 <flow              xd:script = "occurs *;  ref flow" />
 <forEach           xd:script = "occurs *;  ref forEach" />
 <if                xd:script = "occurs *;  ref if" />
 <invoke            xd:script = "occurs *;  ref invoke" />
 <pick              xd:script = "occurs *;  ref pick" />
 <receive           xd:script = "occurs *;  ref receive" />
 <reply             xd:script = "occurs *;  ref reply" />
 <sequence          xd:script = "occurs *;  ref sequence" />
 <throw             xd:script = "occurs *;  ref throw" />
 <scope             xd:script = "occurs *;  ref scope" />
 <repeatUntil       xd:script = "occurs *;  ref repeatUntil" />
 <validate          xd:script = "occurs *;  ref validate" />
 <wait              xd:script = "occurs *;  ref wait" />
 <while             xd:script = "occurs *;  ref while" />
</xd:mixed>
   <!--======================================-->
   <!-- HandlerActivity                      -->
   <!--======================================-->
<HandlerActivity>
  <xd:choice>
     <compensate        xd:script = "occurs 1;  ref compensate" />
     <compensateScope   xd:script = "occurs 1;  ref compensateScope" />
  </xd:choice>
</HandlerActivity>

   <!--======================================-->
   <!-- FaultHandlerActivity                 -->
   <!--======================================-->
<FaultHandlerActivity>
  <xd:choice>
     <rethrow           xd:script = "occurs 1;  ref rethrow" />
  </xd:choice>
</FaultHandlerActivity>
   <!--======================================-->
   <!-- if                                   -->
   <!--======================================-->
<if       xd:script = "ref StdActivity; onStartElement out('if'); finally outln()">
       <condition xd:script="occurs 1;       ref condition" />
       <xd:choice ref = "Activity"/>
       <elseif    xd:script="occurs 0..;     ref elseif; onStartElement out('else if');" />
       <else      xd:script="occurs 0..1;    ref else; onStartElement outln('else');" />
</if>

<elseif>
       <condition xd:script="occurs 1;       ref condition" />
       <xd:choice ref = "Activity"/>
</elseif>

<else>
       <xd:choice ref = "Activity"/>
</else>
   <!--======================================-->
   <!-- while                               -->
   <!--======================================-->
<while    xd:script  = "ref StdActivity; onStartElement out('while'); finally outln()">
         <condition   xd:script="occurs 1;   ref condition" />
         <xd:choice ref = "Activity"/>
</while>
   <!--======================================-->
   <!-- repeatUntil                          -->
   <!--======================================-->
<repeatUntil  xd:script  = "ref StdActivity">
         <xd:choice ref = "Activity"/>
         <condition   xd:script="occurs 1;   ref condition" />
</repeatUntil>
   <!--======================================-->
   <!-- forEach                              -->
   <!--======================================-->
<forEach  xd:script   = "ref StdActivity"
          counterName = "required NCName ()"
          parallel    = "required enum('yes','no')">
         <startCounterValue   xd:script = "occurs 1 ;    ref startCounterValue" />
         <finalCounterValue   xd:script = "occurs 1 ;    ref finalCounterValue" />
         <completionCondition xd:script = "occurs 0..1 ; ref completionCondition" />
         <scope               xd:script = "occurs 1 ;    ref scope" />
</forEach>

<finalCounterValue   expressionLanguage = "optional uri()">
                     required ${IntegerUnsignedExpr}
</finalCounterValue>

<startCounterValue   expressionLanguage = "optional uri()">
                     required ${IntegerUnsignedExpr}
</startCounterValue>

<completionCondition>
         <branches            xd:script = "occurs 1 ;    ref branches" />
</completionCondition>


<branches expressionLanguage = "optional uri()"
          countCompletedBranchesOnly = "optional enum('yes','no')">
                  required ${IntegerUnsignedExpr}
</branches>
   <!--======================================-->
   <!-- wait                                 -->
   <!--======================================-->
<wait  xd:script = "ref StdActivity">
      <ForOrUntil   xd:script= "occurs 1 ;  ref ForOrUntil" />
</wait>
   <!--======================================-->
   <!-- ForOrUntil Model                     -->
   <!--======================================-->
<ForOrUntil>
      <xd:choice>
           <for           xd:script= "occurs 1 ;  ref for" />
           <until         xd:script= "occurs 1 ;  ref until" />
      </xd:choice>
</ForOrUntil>

<for         expressionLanguage = "optional uri()">
             required ${DurationExpr}
</for>

<until       expressionLanguage = "optional uri()">
             required ${DeadlineExpr}
</until>

<repeatEvery expressionLanguage = "optional uri()">
             required ${DurationExpr}
</repeatEvery>
   <!--======================================-->
   <!-- pick                                 -->
   <!--======================================-->
<pick   xd:script = "ref StdActivity"
        createInstance = "optional enum('yes','no')">

    <onMessage    xd:script="occurs 1.. ; ref onMessage" />
    <onAlarm      xd:script="occurs 0.. ; ref OnAlarmActivity" />
</pick>

   <!--======================================-->
   <!-- empty                                -->
   <!--======================================-->
<empty  xd:script = "ref StdActivity; onStartElement out(';')"/>
   <!--======================================-->
   <!-- exit                                 -->
   <!--======================================-->
<exit       xd:script = "ref StdActivity"/>
   <!--======================================-->
   <!-- throw                                -->
   <!--======================================-->
<throw  xd:script = "ref StdActivity"
        faultName = "required  QName  ()"
        faultVariable = "optional  NCName ()"/>
   <!--======================================-->
   <!-- sequence                             -->
   <!--======================================-->
<sequence  xd:script = "ref StdActivity; onStartElement out('{'); finally out('}');">
         <xd:mixed ref = "Activities"/>
</sequence>
   <!--======================================-->
   <!-- compensateScope                      -->
   <!--======================================-->
<compensateScope xd:script = "ref StdActivity"
                 scope     = "optional  NCName ()"/>
   <!--======================================-->
   <!-- compensate                           -->
   <!--======================================-->
<compensate xd:script = "ref StdActivity"/>
   <!--======================================-->
   <!-- rethrow                              -->
   <!--======================================-->
<rethrow    xd:script = "ref StdActivity"/>
   <!--======================================-->
   <!-- extensionActivity                    -->
   <!--======================================-->
<extensionActivity  xd:script = "ref StdActivity"
                    xd:attr ="optional" >
        <xd:any xd:script = "occurs 0.."/>
</extensionActivity>
   <!--======================================-->
   <!-- flow                                 -->
   <!--======================================-->
<flow     xd:script = "ref StdActivity">
         <links       xd:script="occurs 0..1;    ref links" />
         <xd:choice ref = "Activity"/>
</flow>

<link                 name="required NCName ()"/>
<links>
         <link        xd:script="occurs 1.. ;    ref link" />
</links>
   <!--======================================-->
   <!-- eventHandlers                        -->
   <!--======================================-->
<eventHandlers>
    <!-- Note: There must be at least one onMessage or onAlarm handler. -->
    <onEvent   xd:script="occurs 0.. ; ref onEvent" />
    <onAlarm   xd:script="occurs 0.. ; ref OnAlarmScopeWithRepeat" />
</eventHandlers>

   <!--======================================-->
   <!-- onAlarm                              -->
   <!--======================================-->
<OnAlarmScopeWithRepeat>
      <ForOrUntil   xd:script = "occurs 1 ;     ref ForOrUntil" />
      <repeatEvery  xd:script = "occurs 0..1 ;  ref repeatEvery" />
      <scope        xd:script = "occurs 1 ;     ref scope" />
</OnAlarmScopeWithRepeat>

<OnAlarmActivity>
      <ForOrUntil   xd:script = "occurs 1 ;     ref ForOrUntil" />
      <xd:choice ref = "Activity"/>
</OnAlarmActivity>

   <!--======================================-->
   <!-- onEvent                              -->
   <!--======================================-->
<onEvent partnerLink = "required NCName()"
         portType = "optional QName ()"
         operation = "required NCName()"
         messageType = "optional QName ()"
         element = "optional QName ()"
         variable = "optional ${BPELVariableName}"
         messageExchange = "optional NCName()">
         <correlations  xd:script="occurs 0..1; ref correlations" />
         <fromPart      xd:script="occurs 0..;  ref fromPart" />
         <scope         xd:script="occurs 1;    ref scope" />
</onEvent>

   <!--======================================-->
   <!-- onMessage                            -->
   <!--======================================-->
<onMessage partnerLink = "required NCName()"
           portType = "optional QName ()"
           operation = "required NCName()"
           variable = "optional ${BPELVariableName}">
         <correlations  xd:script="occurs 0..1; ref correlations" />
         <fromPart      xd:script="occurs 0.. ; ref fromPart" />
         <xd:choice ref = "Activity"/>
</onMessage>
   <!--======================================-->
   <!-- fromPart, toPart                   s -->
   <!--======================================-->
<fromPart part = "required NCName()"
          toVariable = "required ${BPELVariableName}" />

<toPart part = "required NCName()"
        fromVariable = "required ${BPELVariableName}" />
   <!--======================================-->
   <!-- Correlations,Correlation             -->
   <!--======================================-->
<correlation       set = "required  num () "
              initiate = "optional enum('yes','join','no')"/>

<correlations>
    <correlation     xd:script="occurs 1..;  ref correlation" />
</correlations>

<CorrelationsWithPattern>
    <correlation     xd:script="occurs 1..;  ref correlation"
             pattern = "optional enum('request','response','request-response')"/>
</CorrelationsWithPattern>
   <!--======================================-->
   <!-- Invoke                               -->
   <!--======================================-->
<invoke xd:script = "ref StdActivity"
        partnerLink = "required  NCName ()"
        portType = "optional  QName  ()"
        operation = "required  NCName ()"
        inputVariable = "optional  NCName ()"
        ounputVariable = "optional  NCName ()">

    <correlations        xd:script= "occurs 0..1;  ref CorrelationsWithPattern" />
    <catch               xd:script= "occurs 0.. ;  ref catch" />
    <catchAll            xd:script= "occurs 0..1;  ref catchAll" />
    <compensationHandler xd:script= "occurs 0..1;  ref compensationHandler" />
    <toPart              xd:script= "occurs 0.. ;  ref toPart" />
    <fromPart            xd:script= "occurs 0.. ;  ref fromPart" />
</invoke>
   <!--======================================-->
   <!-- Catch  CatchAll  CompensatinsHandler -->
   <!--======================================-->
<catch faultName = "optional QName ()"
       faultVariable = "optional NCName()"
       faultMessageType = "optional QName ()"
       faultElement = "optional QName ()">
    <xd:choice ref = "Activity"/>
</catch>

<catchAll>
    <xd:choice ref = "Activity"/>
</catchAll>
   <!--======================================-->
   <!-- receive                            s -->
   <!--======================================-->
<receive xd:script = "ref StdActivity"
         partnerLink = "required  NCName ()"
         portType = "optional  QName  ()"
         operation = "required  NCName ()"
         variable = "optional  ${BPELVariableName}"
         createInstance = "optional enum('yes','no')">

    <correlations        xd:script= "occurs 0..1;  ref correlations" />
    <fromPart            xd:script= "occurs 0.. ;  ref fromPart" />
</receive>
   <!--======================================-->
   <!-- reply                              s -->
   <!--======================================-->
<reply xd:script = "ref StdActivity"
       partnerLink = "required  NCName ()"
       portType = "optional  QName  ()"
       operation = "required  NCName ()"
       variable = "optional  ${BPELVariableName}"
       faultName = "optional  QName  ()"
       messageExchange = "optional  NCName ()">

    <correlations        xd:script= "occurs 0..1;  ref correlations" />
    <toPart              xd:script= "occurs 0.. ;  ref toPart" />
</reply>
   <!--======================================-->
   <!-- validate                             -->
   <!--======================================-->
<validate    xd:script = "ref StdActivity"
             variables = "required NCNameList()"/>
   <!--======================================-->
   <!-- assign                               -->
   <!--======================================-->
<assign   xd:script= "ref StdActivity"
          validate = "optional enum('yes','no')">
         <CopyOrExtensibleAssign xd:script="occurs 1..;    ref CopyOrExtensibleAssign" />
</assign>

<CopyOrExtensibleAssign>
  <xd:choice>
      <copy             xd:script="occurs 1;  ref copy" />
      <extensibleAssign xd:script="occurs 1;  ref extensibleAssign" />
  </xd:choice>
</CopyOrExtensibleAssign>

<copy>
         <FromSpec      xd:script="occurs 1;    ref FromSpec"/>
         <ToSpec        xd:script="occurs 1;    ref ToSpec"  />
</copy>

<extensibleAssign>
   <!-- NENI HOTOVO                                -->
</extensibleAssign>
   <!--======================================-->
   <!-- from-spec   to-spec                  -->
   <!--======================================-->
<query   queryLanguage = "optional uri()">required ${QueryExpr}</query>

<FromSpec>
  <xd:choice>
     <from xd:script="match(@partnerLink OR @endpointReference)"
           partnerLink = "required NCName ()"
           endpointReference = "required enum('myRole','partnerRole')"/>
     <from xd:script = "match(@variable AND @property)"
           variable = "required ${BPELVariableName}"
           property = "optional NCName ()"/>
     <from xd:script="match(@variable)"
           variable = "required ${BPELVariableName}"
           part  = "optional NCName ()">
             <query xd:script = "occurs 0..1; ref query" />
          </from>
     <from xd:script="match(@expressionLanguage)"
                  expressionLanguage = "optional uri()">
             required ${Expression}
          </from>
     <from>
             <xd:choice>
                <literal>required ${Literal}</literal>
                required ${Expression}
            </xd:choice>
          </from>
  </xd:choice>
</FromSpec>

<ToSpec>
  <xd:choice>
     <to      xd:script = "match(@partnerLink)"
              partnerLink = "required NCName ()"/>
     <to      xd:script = "match(@variable AND @property)"
              variable  = "required ${BPELVariableName}"
              property  = "optional QName  ()"/>
     <to      xd:script = "match(@variable)"
              variable  = "required ${BPELVariableName}"
              part = "optional NCName ()">
             <query xd:script = "occurs 0..1; ref query" />
          </to>

     <to      xd:script = "match(NOT @partnerLink AND NOT@variable AND NOT@property AND NOT@part)"
              queryLanguage = "optional uri()">
              required ${QueryExpr}
     </to>
  </xd:choice>
</ToSpec>
   <!--======================================-->
   <!-- scope                                -->
   <!--======================================-->
<scope    xd:script  = "ref StdActivity"
          isolated = "optional enum('yes','no')"
          exitOnStandardFault = "optional enum('yes','no')">

   <variables           xd:script= "occurs 0..1;  ref variables" />
   <partnerLinks        xd:script= "occurs 0..1;  ref partnerLinks" />
   <messageExchanges    xd:script= "occurs 0..1;  ref messageExchanges" />
   <correlationSets     xd:script= "occurs 0..1;  ref correlationSets" />
   <eventHandlers       xd:script= "occurs 0..1;  ref eventHandlers" />
   <faultHandlers       xd:script= "occurs 0..1;  ref faultHandlers" />
   <terminationHandler  xd:script= "occurs 0..1;  ref terminationHandler" />

   <Activity />
</scope>
   <!--======================================-->
   <!-- partnerLink                          -->
   <!--======================================-->
<partnerLinks>
    <partnerLink    xd:script= "occurs 1.. ;  ref partnerLink" />
</partnerLinks>

<partnerLink name = "required NCName ()"
             partnerLinkType  = "required QName  ()"
             myRole = "optional NCName ()"
             partnerRole = "optional NCName ()"/>
                <!-- Note: At least one role must be specified. -->
   <!--======================================-->
   <!-- messageExchanges                     -->
   <!--======================================-->
<messageExchanges>
    <messageExchange xd:script= "occurs 1.. ;  ref messageExchange" />
</messageExchanges>

<messageExchange    name = "required NCName ()" />
   <!--======================================-->
   <!-- variables                            -->
   <!--======================================-->
<variables>
    <variable        xd:script= "occurs 1.. ;  ref variable" />
</variables>

<variable name = "required ${BPELVariableName}"
          messageType = "optional QName ()"
          type = "optional QName ()"
          element = "optional QName ()">
       <FromSpec    xd:script="occurs 0..1;    ref FromSpec"/>

</variable>
   <!--======================================-->
   <!-- correlationSets                      -->
   <!--======================================-->
<correlationSets>
    <correlationSet xd:script= "occurs 1.. ;  ref correlationSet" />
</correlationSets>

<correlationSet name = "required NCName ()"
                properties = "required QNameList ()"/>
   <!--======================================-->
   <!-- faultHandlers                        -->
   <!--======================================-->
<faultHandlers>
      <!-- Note: There must be at least one faultHandler -->
      <catch     xd:script="occurs 0..;  ref catch" />
      <catchAll  xd:script="occurs 0..1; ref catchAll" />
      <xd:choice ref = "Activity"/>
</faultHandlers>
   <!--======================================-->
   <!-- compensationHandler                  -->
   <!--======================================-->
<compensationHandler>
      <xd:choice ref = "Activity"/>
</compensationHandler>
   <!--======================================-->
   <!-- terminationHandler                   -->
   <!--======================================-->
<terminationHandler>
      <xd:choice ref = "Activity"/>
</terminationHandler>
   <!--======================================-->
   <!-- extensions                           -->
   <!--======================================-->
<extensions>
      <extension  xd:script="occurs 0..;  ref extension" />
</extensions>

<extension namespace = "optional uri()"
           mustUnderstand = "optional enum('yes','no')" />
   <!--======================================-->
   <!-- import                               -->
   <!--======================================-->
<import     namespace = "optional uri()"
            location = "optional uri()"
            importType = "optional uri()"/>
</xd:def>