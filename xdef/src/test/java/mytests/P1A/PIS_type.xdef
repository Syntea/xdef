<?xml version="1.0" encoding="utf-8" ?>

<xd:def xmlns:xd       ="http://www.xdef.org/xdef/4.0"
        impl-version   ="4.6.0_0" impl-date="2024-05-23"
        xd:name        ="PIS_type">

 <xd:declaration scope="global">
   type  addInfo                 enum('0','1');
   type  bankaZahr               string(1,11);
   type  barvaText               string(1,20);
   type  booleanA                enum('A');
   type  booleanAN               enum('A','N');
   type  booleanYAN              enum('Y','A','N');
   type  castka                  long(-99_999_999_999,99_999_999_999);
   type  castkaDec               dec(13,2);
   type  celkovaHmotnost         long(1,999_999);
   type  celkovaHmotnostOut      long(0,999_999);
   type  ciselnikKod             string(1,30);
   type  ciselnikName            string(1,30);
   type  ciselnikPopis           string(1,100);
   type  cisloDokladu            string(1,12);  	/* Číslo dokladu, číslo TP, číslo ORV, ... */
   type  cisloDokladuPojisteni   string(1,35); 
   type  cisloDomu               string(1,10);       /* Číslo domu, popř. včetně označení vchodu */
   type  cisloMotoru             string(1,26);
   type  cisloOrientacni         string(1,10);       /* !!! Nahradit číslem domu  */
   type  cisloORV                regex ('[A-Z]{3}[0-9]{6}');
   type  cisloPopisne            string(1,10);       /* !!! Nahradit číslem domu  */ 
   type  cisloPU                 string(3,35);       /* Číslo pojistné události   */ 
   type  cisloSilnice            string(1,15);
   type  cisloSmlouvy            string(1,35);
   type  cisloSU                 string(3,35);
   type  cisloTP                 regex ('[A-Z]{2}[0-9]{6}');
   type  cisloTPAll              string(1,12);       /* Číslo TP včetně hist. a zahraničních vozidel  */ 
   type  cisloZK                 string(1,11);       /* Číslo ZK */  
   type  cjRelacePolicie         string(1,50);
   type  countSU                 long(0,99_999_999);
   type  dateSTK                 xdatetime('MM/yyyy');
   type  detailBM                enum('A','DV','DVA'); 
   type  dobaPojisteni           long(0,99_999_999);        
   type  dobaPojisteniBP         long(0,999_999);        
   type  dobaPojisteniBP12       long(0,12);
   type  dobaPojisteniBP48       long(0,48);
   type  druhPojisteni           string(3,8)     /*AAND tab('CC_DruhPojisteni','DruhPojisteni')*/;        
   type  druhPojisteniText       string(1,50)    /*AAND tab('CC_DruhPojisteni','PopisDruhuPojisteni')*/;        
   type  druhSouboru             regex('[A-Z]\\d[A-Z]{1,2}') /*AAND tab('VR_DefFileClass','FileClassCode')*/;
   type  druhVozidlaText         string(1,50)    /*AAND tab('CC_DruhVozidla','DruhVozidla')*/;
   type  duvodZanikuSmlouvyText  string(1,50)    /*AAND tab('PS_DuvodZanikuSmlouvy','DuvodZanikuSmlouvy')*/;           
   type  emailAdresa             emailAddr();
   type  gamDateTime2xsDate      xdatetime('yyyyMMdd[HHmm[ss]]','yyyy-MM-dd');
   type  gpsCoordinate           dec(9,5);
   type  gpsSystem               enum('WGS84','S-JTSK');
   type  ic                      string(1,12);
   type  identPodsmlouvy         string(1,10);
   type  identSouboru            long(1,9_999_999);
   type  indikator               string()        /*AAND tab('CC_Indikator','Indikator')*/;
   type  jmeno                   string(1,48); 
   type  kategorieBM             string(1,20)    /*AAND tab('BM_Kategorie','KodKategorie')*/;
   type  kategorieFlotily        string(1,36)    /*AAND tab('CC_KategorieFlotily','KategorieFlotily')*/;
   type  kilometrovnik           dec(5,1);
   type  kodBankyCR              num(4);
   type  kodDruhuPojisteni       string(3,8)     /*AAND tab('CC_DruhPojisteni','DruhuPojisteni')*/;
   type  kodDruhuVozidla         num(2)          /*AAND tab('CC_DruhVozidla','KodDruhuVozidla')*/;
   type  kodDuvoduOdstoupeni     num(1,2)        /*AAND tab('CC_DuvodOdstoupeni','KodDuvoduOdstoupeni')*/;
   type  kodDuvoduUzavreniSU     string(1)       /*AAND tab('CC_DuvodUzavreniSU','KodDuvoduUzavreniSU')*/;
   type  kodDuvoduZanikuPojisteni num(1,2)       /*AAND tab('CC_DuvodZanikuPojisteni','KodDuvoduZanikuPojisteni')*/;
   type  kodDuvoduZanikuSmlouvy  num(1,2)        /*AAND tab('PS_DuvodZanikuSmlouvy','KodDuvoduZanikuSmlouvy')*/;
   type  kodFrekvenceUhrady      string(1)       /*AAND tab('CC_FrekvenceUhrady','KodFrekvenceUhrady')*/;
   type  kodKategorieFlotily     num(1)          /*AAND tab('CC_KategorieFlotily','KodKategorieFlotily')*/;
   type  kodMeny                 string(3)       /*AAND tab('CC_Mena','KodMeny')*/; 
   type  kodModeluVozidla        long(1,9_999)   /*AAND tab('CC_ModelVozidla','KodModeluVozidla')*/;
   type  kodOpravny              string(1,16)    /*AAND tab('CC_Opravna','KodOpravny')*/;
   type  kodPodtypuSkody         string(1,3)     /*AAND tab('CC_PodtypSkody','KodPodtypuSkody')*/;
   type  kodPojistitele          num(4)          /*AAND tab('CC_Pojistitel','KodPojistitele')*/;
   type  kodRizika               num(1,2)        /*AAND tab('CC_Riziko','KodRizika')*/;
   type  kodStatu                string(1,3)     /*AAND tab('CC_Stat','KodStatu')*/;
   type  kodStavuSetreniPolicie  string(1)       /*AAND tab('CC_StavSetreniPolicie','KodStavuSetreniPolicie')*/;
   type  kodStavuSmlouvy         enum('T','U','N');
   type  kodStavuSmlouvyOut      enum('T','U','N','Z');
   type  kodStavuSUPU            enum('O','U','N') /*AAND tab('DS_Stav','KodStav')*/;
   type  kodTarifniSkupiny       num(1,3)       /*AAND tab('CC_TarifniSkupinaVozidel','KodTarifniSkupinyVozidel')*/;
   type  kodTypuAdresy           string(1)       /*AAND tab('CC_TypAdresy','KodTypuAdresy')*/;
   type  kodTypuMajetku          string(1)       /*AAND tab('DS_TypMajetku','KodTypMajetku')*/;
   type  kodTypuMinusPlneni      string(1)       /*AAND tab('CC_TypMinusPlneni','KodTypMinusPlneni')*/;
   type  kodTypuNaroku           enum('E','P','R');
   type  kodTypuPojisteni        enum('S','O');
   type  kodTypuPojistneCastky   string(1)       /*AAND tab('CC_TypPojistneCastky','KodTypuPojistneCastky')*/;
   type  kodTypuPojistneho       enum('Z','B','BM');    /* BM se převede na B */
   type  kodTypuPredmetu         enum('MA','PS','PU','SU','VN','VP','VS','VZ');
   type  kodTypuRegresu          string(1)       /*AAND tab('CC_TypRegresu','KodTypRegresu')*/;
   type  kodTypuSkodicihoVozidla enum('POJI','NEPOJI','NEZJI');
   type  kodTypuUziti            num(1)          /*AAND tab('CC_TypUziti','KodTypuUziti')*/;
   type  kodZnackyVozidla        long(1,9_999)   /*AAND tab('CC_ZnackaVozidla','IdZnackaVozidla')*/;
   type  kodZpusobuUzavreniPU    string(1)       /*AAND tab('CC_ZpusobUzavreniPU','KodZpusobUzavreniPU')*/;
   type  kvadrant                regex('X|Z|O|[LRFBTUN]{1,7}') /*AAND regex('[A-Z]{1,10}')*/ ;
   type  likvidacniTitul         enum('POV','HAV');
   type  limitPlneni             long(0,99_999_999_999);
   type  mistoText               string(1,512);
   type  mistoUhradyHP           string(1,255);
   type  modelVozidla            string(1,40)    /*AAND tab('CC_ModelVozidla','ModelVozidla')*/;
   type  modelText               string(1,40);
   type  nazevFirmy              string(1,100);
   type  nositelPSP              enum('S','V');
   type  obec                    string(1,48); 	
   type  okres                   string(1,36);
   type  ord                     long(-999_999_999,+999_999_999);
   type  period                  string(4,7);
   type  pocetKm                 long(-1,9_999_999);
   type  pocetMistCelkem         long(0,999);
   type  pocetPS                 long(0,99_999_999);
   type  pocetSU                 long(0,999_999);
   type  pocetZaznamu            long(0,99_999_999);
   type  pojistne                long(-999_999_999_999,999_999_999_999);
   type  popis                   string(1,255);
   type  popisMajetku            string(1,512);
   type  popisMisto              string(1,512);
   type  poradi                  long(1,9_999_999);
   type  poradiNaroku            long(1,9_999_999);
   type  poradiVozidla           string(1,10);
   type  poradiVozidlaSU         long(1,9_999_999_999);
   type  poradiVozidlaXX         long(1,9_999_999_999);
   type  prijmeni                string(1,36);
   type  psc                     string(1,10);
   type  rc                      string(1,14);
   type  rok365                  enum('0','-1','-2','-3');
   type  rokDoProvozu            xdatetime('yyyy-MM-dd[Z]|yyyyMMdd|yyyy','yyyy');
   type  roleSubjektuBM          enum('NOSITEL','POJISTNIK','PROVOZOVATEL');
   type  roleSubjektuDS          enum('LIKVIDATOR','POJISTNIK','POSKOZENY','PROVOZOVATEL','RIDIC','SVEDEK',
                                      'VLASTNIK','ZNALEC');
   type  roleSubjektuPSBM        enum('N','P','NOSITEL','POJISTNIK');
   type  roleSubjektuPS          enum('POJISTNIK','VLASTNIK','PROVOZOVATEL');
   type  roleVozidlaDS           enum('SKODICI','POSKOZENE','NEZJISTENE');
   type  spz                     string(2,12);
   type  spzOut                  string(1,12);
   type  statisticsPeriod        string(4,7);
   type  statisticsNames         string(255);
   type  statKod                 string(1,3)     /*AAND tab('CC_Stat','KodStatu')*/;
   type  statNazev               string(1,50)    /*AAND tab('CC_Stat','NazevStatuCZ')*/;
   type  stavSmlouvy             string(7,8)     /*AAND tab('PS_StavSmlouvy','StavSmlouvy')*/;
   type  subjektText             string(1,50);
   type  telCisloCZSK            regex('(\\+42[01])?\\s?\\d{3}\\s?\\d{3}\\s?\\d{3}');
   type  telCisloText            string(1,50);   
   type  typUziti                string(1,36)    /*AAND tab('CC_TypUziti','TypUziti')*/;
   type  ucetCisloZahr           string(1,31);
   type  ucetCisloCR             num(2,10);
   type  ucetIBAN                string(1,34);
   type  ucetPredcisliCR         num(1,6);
   type  ucetText                string(1,50); 
   type  ulice                   string(1,48);
   type  valueType               enum('NUMBER','VARCHAR2','CHAR','DATETIME');
   type  verzeSeq                long(1,999_999);
   type  vin                     string(1,26);
   type  vin8                    string(8);
   type  vykonMotoru             decimal(%totalDigits=6, %fractionDigits=2, %minInclusive=0);
   /*  pozn.: vykon motoru je dec(6,2) větší nebo roven 0 */
   type  vykonMotoruOut          long(0,9_999);
   type  xsDate                  xdatetime('yyyy-MM-dd[Z]|'+
                                           'yyyyMMdd|'+
                                           'd.M.yyyy', 'yyyy-MM-dd');
   type  xsDateDo                xdatetime('{HH23mm59ss59}yyyy-MM-dd|'+
                                           '{HH23mm59ss59}yyyyMMdd|'+
                                           '{HH23mm59ss59}d.M.yyyy', 'yyyy-MM-dd'); 
   type  xsDateOutOLD            xdatetime('yyyyMMdd');
   type  xsDateTime              xdatetime('yyyy-MM-ddTHH:mm:ss|'+
                                           '{HH00mm00ss00}yyyy-MM-dd[THH:mm[:ss][Z]]|'+
                                           '{HH00mm00ss00}yyyyMMdd[HHmm[ss]]|'+
                                           '{HH00mm00ss00}d.M.yyyy[ HH:mm[:ss]]', 'yyyy-MM-ddTHH:mm:ss');
   type  xsDateTimeOd            xdatetime('yyyy-MM-ddTHH:mm:ss|'+
                                           '{HH00mm00ss00}yyyy-MM-dd[THH:mm[:ss][Z]]|'+
                                           '{HH00mm00ss00}yyyyMMdd[HHmm[ss]]|'+
                                           '{HH00mm00ss00}d.M.yyyy[ HH:mm[:ss]]', 'yyyy-MM-ddTHH:mm:ss');
   type  xsDateTimeDo            xdatetime('yyyy-MM-ddTHH:mm:ss|'+
                                           '{HH23mm59ss59}yyyy-MM-dd[THH:mm[:ss][Z]]|'+
                                           '{HH23mm59ss59}yyyyMMdd[HHmm[ss]]|'+
                                           '{HH23mm59ss59}d.M.yyyy[ HH:mm[:ss]]', 'yyyy-MM-ddTHH:mm:ss');
   type  xsTimeStamp             xdatetime('{HH00mm00ss00}yyyy-MM-dd[THH:mm:ss.SSS]|'+
                                           '{HH00mm00ss00}yyyy-MM-dd[THH:mm:ss[.S]]|'+
                                           '{HH00mm00ss00}yyyy-MM-dd[ HH:mm:ss[.S]]|' +
                                           '{HH00mm00ss00}yyyyMMdd[HHmmss[SSS]]', 'yyyy-MM-ddTHH:mm:ss.SSS');
   type  zdvihovyObjem           long(0,99_999);	/* elektro nemá objem */
   type  znackaVozidla           string(1,30)    /*AAND tab('CC_ZnackaVozidla','ZnackaVozidla')*/;
   type  znackaText              string(1,30);
 </xd:declaration>
 </xd:def>
