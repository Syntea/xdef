// This file was generated by org.xdef.component.GenXComponent.
// X-position: "#A".
// Any modifications to this file will be lost upon recompilation.
package bugreports;
public class MytestX_CHECK implements org.xdef.component.XComponent{
  public String geta() {return _a;}
  public java.util.List<String> get$b() {
	java.util.List<String> y = new java.util.ArrayList<>();
	for (MytestX_CHECK.b z : listOfb()) {
	  y.add(z.get$value());
	}
	return y;
  }
  public java.util.List<MytestX_CHECK.b> listOfb() {
	return _b;
  }
  public void seta(String x) {_a=x;}
  public void set$b(java.util.List<String> x) {
	java.util.List<MytestX_CHECK.b> y = listOfb();
	y.clear();
	if (x==null)return;
	for (String w : x) {
	  if (w != null) {
		MytestX_CHECK.b z = new MytestX_CHECK.b();
		z.set$value(w);
		y.add(z);
	  }
	}
  }
  public void addb(MytestX_CHECK.b x) {
	if (x!=null) _b.add(x);
  }
  public String xposOfa(){return XD_XPos+"/@a";}
//<editor-fold defaultstate="collapsed" desc="Implementation of XComponent interface">
  private String XD_Name_a="a";
  private String _a;
  private final java.util.List<MytestX_CHECK.b> _b = new java.util.ArrayList<>();

	@Override
	public Object xGet(final String name) {throw new RuntimeException("Unused");}

	@Override
	public void xSet(final String name, Object value) {throw new RuntimeException("Unused");}
  @Override
  public Object toXon() {return org.xdef.component.XComponentUtil.toXon(this);}
  @Override
  public org.w3c.dom.Element toXml()
	{return (org.w3c.dom.Element) toXml((org.w3c.dom.Document) null);}
  @Override
  public String xGetNodeName() {return XD_NodeName;}
  @Override
  public void xInit(org.xdef.component.XComponent p,
	String name, String ns, String xdPos) {
	XD_Parent=p; XD_NodeName=name; XD_NamespaceURI=ns; XD_Model=xdPos;
  }
  @Override
  public String xGetNamespaceURI() {return XD_NamespaceURI;}
  @Override
  public String xGetXPos() {return XD_XPos;}
  @Override
  public void xSetXPos(String xpos){XD_XPos = xpos;}
  @Override
  public int xGetNodeIndex() {return XD_Index;}
  @Override
  public void xSetNodeIndex(int index) {XD_Index = index;}
  @Override
  public org.xdef.component.XComponent xGetParent() {return XD_Parent;}
  @Override
  public Object xGetObject() {return XD_Object;}
  @Override
  public void xSetObject(final Object obj) {XD_Object = obj;}
  @Override
  public String toString() {return "XComponent: "+xGetModelPosition();}
  @Override
  public String xGetModelPosition() {return XD_Model;}
  @Override
  public int xGetModelIndex() {return -1;}
  public final static byte XON = 0;
  @Override
  public java.util.List<org.xdef.component.XComponent> xGetNodeList() {
	java.util.List<org.xdef.component.XComponent> a=
	  new java.util.ArrayList<>();
	org.xdef.component.XComponentUtil.addXC(a, listOfb());
	return a;
  }
  @Override
  public org.w3c.dom.Node toXml(org.w3c.dom.Document doc) {
	org.w3c.dom.Element el;
	if (doc==null) {
	  doc = org.xdef.xml.KXmlUtils.newDocument(XD_NamespaceURI,
		XD_NodeName, null);
	  el = doc.getDocumentElement();
	} else {
	  el = doc.createElementNS(XD_NamespaceURI, XD_NodeName);
	  if (doc.getDocumentElement()==null) doc.appendChild(el);
	}
	if (geta() != null)
	  el.setAttribute(XD_Name_a, geta());
	for (org.xdef.component.XComponent x: xGetNodeList())
	  el.appendChild(x.toXml(doc));
	return el;
  }
  public MytestX_CHECK() {}
  public MytestX_CHECK(org.xdef.component.XComponent p,
	String name, String ns, String xPos, String XDPos) {
	XD_NodeName=name; XD_NamespaceURI=ns;
	XD_XPos=xPos;
	XD_Model=XDPos;
	XD_Object = (XD_Parent=p)!=null? p.xGetObject(): null;
  }
  public MytestX_CHECK(org.xdef.component.XComponent p,org.xdef.proc.XXNode x) {
	org.w3c.dom.Element el=x.getElement();
	XD_NodeName=el.getNodeName(); XD_NamespaceURI=el.getNamespaceURI();
	XD_XPos=x.getXPos();
	XD_Model=x.getXMElement().getXDPosition();
	XD_Object = (XD_Parent=p)!=null? p.xGetObject(): null;
	if (!"DB2C5B6E8193E538F8ECE8A91150F0AE4D0D2105024BB0C17782A94130B71AED".equals(
	  x.getXMElement().getDigest())) { //incompatible element model
	  throw new org.xdef.sys.SRuntimeException(
		org.xdef.msg.XDEF.XDEF374);
	}
  }
  public static final String XD_NAME="A";
  private org.xdef.component.XComponent XD_Parent;
  private Object XD_Object;
  private String XD_NodeName = "A";
  private String XD_NamespaceURI;
  private int XD_Index = -1;
  private int XD_ndx;
  private String XD_XPos;
  private String XD_Model="#A";
  @Override
  public void xSetText(org.xdef.proc.XXNode x, org.xdef.XDParseResult value){}
  @Override
  public void xSetAttr(org.xdef.proc.XXNode x, org.xdef.XDParseResult value){
	XD_Name_a = x.getNodeName();
	seta(value.getParsedValue().isNull()? null: value.getParsedValue().toString());
  }
  @Override
  public org.xdef.component.XComponent xCreateXChild(org.xdef.proc.XXNode x){return new b(this, x);}
  @Override
  public void xAddXChild(org.xdef.component.XComponent x) {
	x.xSetNodeIndex(XD_ndx++);
	listOfb().add((b) x); //#A/b
  }
  @Override
  public void xSetAny(org.w3c.dom.Element el) {}
// </editor-fold>
public static class b implements org.xdef.component.XComponent{
  public String get$value() {return _$value;}
  public void set$value(String x) {_$value=x;}
  public String xposOf$value(){return XD_XPos+"/$text";}
//<editor-fold defaultstate="collapsed" desc="Implementation of XComponent interface">
  private String _$value;
  private char _$$value= (char) -1;
  @Override
  public Object toXon() {return org.xdef.component.XComponentUtil.toXon(this);}
  @Override
  public org.w3c.dom.Element toXml()
	{return (org.w3c.dom.Element) toXml((org.w3c.dom.Document) null);}
  @Override
  public String xGetNodeName() {return XD_NodeName;}
  @Override
  public void xInit(org.xdef.component.XComponent p,
	String name, String ns, String xdPos) {
	XD_Parent=p; XD_NodeName=name; XD_NamespaceURI=ns; XD_Model=xdPos;
  }
  @Override
  public String xGetNamespaceURI() {return XD_NamespaceURI;}
  @Override
  public String xGetXPos() {return XD_XPos;}
  @Override
  public void xSetXPos(String xpos){XD_XPos = xpos;}
  @Override
  public int xGetNodeIndex() {return XD_Index;}
  @Override
  public void xSetNodeIndex(int index) {XD_Index = index;}
  @Override
  public org.xdef.component.XComponent xGetParent() {return XD_Parent;}
  @Override
  public Object xGetObject() {return XD_Object;}
  @Override
  public void xSetObject(final Object obj) {XD_Object = obj;}
  @Override
  public String toString() {return "XComponent: "+xGetModelPosition();}
  @Override
  public String xGetModelPosition() {return XD_Model;}
  @Override
  public int xGetModelIndex() {return 0;}
  public final static byte XON = 0;
  @Override
  public java.util.List<org.xdef.component.XComponent> xGetNodeList() {
	java.util.ArrayList<org.xdef.component.XComponent> a=
	  new java.util.ArrayList<>();
	if (get$value() != null)
	  org.xdef.component.XComponentUtil.addText(this,"#A/b/$text", a,
		 get$value(), _$$value);
	return a;
  }
  @Override
  public org.w3c.dom.Node toXml(org.w3c.dom.Document doc) {
	org.w3c.dom.Element el;
	if (doc==null) {
	  doc = org.xdef.xml.KXmlUtils.newDocument(XD_NamespaceURI,
		XD_NodeName, null);
	  el = doc.getDocumentElement();
	} else {
	  el = doc.createElementNS(XD_NamespaceURI, XD_NodeName);
	}
	for (org.xdef.component.XComponent x: xGetNodeList())
	  el.appendChild(x.toXml(doc));
	return el;
  }
  public b() {}
  public b(org.xdef.component.XComponent p,
	String name, String ns, String xPos, String XDPos) {
	XD_NodeName=name; XD_NamespaceURI=ns;
	XD_XPos=xPos;
	XD_Model=XDPos;
	XD_Object = (XD_Parent=p)!=null? p.xGetObject(): null;
  }
  public b(org.xdef.component.XComponent p,org.xdef.proc.XXNode x) {
	org.w3c.dom.Element el=x.getElement();
	XD_NodeName=el.getNodeName(); XD_NamespaceURI=el.getNamespaceURI();
	XD_XPos=x.getXPos();
	XD_Model=x.getXMElement().getXDPosition();
	XD_Object = (XD_Parent=p)!=null? p.xGetObject(): null;
	if (!"C63B3228A7921F6636688E99CCEB9BE892E74CF3798D801056BD3F494D139131".equals(
	  x.getXMElement().getDigest())) { //incompatible element model
	  throw new org.xdef.sys.SRuntimeException(
		org.xdef.msg.XDEF.XDEF374);
	}
  }
  public static final String XD_NAME="b";
  private org.xdef.component.XComponent XD_Parent;
  private Object XD_Object;
  private String XD_NodeName = "b";
  private String XD_NamespaceURI;
  private int XD_Index = -1;
  private int XD_ndx;
  private String XD_XPos;
  private String XD_Model="#A/b";
  @Override
  public void xSetText(org.xdef.proc.XXNode x, org.xdef.XDParseResult value){
	_$$value=(char) XD_ndx++;
	set$value(value.getParsedValue().isNull()? null: value.getParsedValue().toString());
  }
  @Override
  public void xSetAttr(org.xdef.proc.XXNode x, org.xdef.XDParseResult value){}
  @Override
  public org.xdef.component.XComponent xCreateXChild(org.xdef.proc.XXNode x){return null;}
  @Override
  public void xAddXChild(org.xdef.component.XComponent x) {}
  @Override
  public void xSetAny(org.w3c.dom.Element el) {}

	@Override
	public Object xGet(final String name) {throw new RuntimeException("Unused");}

	@Override
	public void xSet(final String name, Object value) {throw new RuntimeException("Unused");}
// </editor-fold>
}
}
