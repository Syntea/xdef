/******************************************************************************/ 
/* Java Syntax Specification                                                  */
/******************************************************************************/ 

/************ Program ************/

java_source ::= package_declaration?
  single_import_declaration*
  type_declaration*

/************ Declarations ************/

package_declaration ::= S? 'package' S identifier ('.' identifier)* S? ';'

single_import_declaration ::= S? 'import' S 
  identifier ('.' identifier)+ S? ';'

type_declaration ::= S? (class_declaration | interface_declaration | S? ';')

class_declaration ::= class_modifiers? 'class' S identifier super?
  interfaces? class_body

class_modifiers ::= class_modifier*

class_modifier ::= ('public' | 'abstract' | 'final') S

super ::= S? 'extends' S  class_type

interfaces ::= S? 'implements' S interface_type_list

interface_type_list ::= interface_type (S? ',' S? interface_type)*

class_body ::= S? '{' S? $info class_body_declaration* S? '}' S?

class_body_declaration ::= class_member_declaration | static_initializer
  | constructor_declaration

class_member_declaration ::= field_declaration | method_declaration

static_initializer ::= 'static' block

constructor_declaration ::= constructor_modifiers? constructor_declarator
  throws? constructor_body

constructor_modifiers ::= (constructor_modifier)+

constructor_modifier ::= ('public' | 'protected' | 'private') S

constructor_declarator ::= simple_type_name
  S? '(' S? formal_parameter_list? S? ')'

formal_parameter_list ::= formal_parameter (S? ',' formal_parameter)*

formal_parameter ::= type variable_declarator_id

throws ::= 'throws' S? class_type_list

class_type_list ::= class_type (S? ',' S? class_type)*

constructor_body ::= '{' S? explicit_constructor_invocation?
  block_statement* S? '}'

explicit_constructor_invocation ::= 'this' S? '(' S? argument_list? S? ')' S?
  | 'super' S? '(' S? argument_list? S? ')'

field_declaration ::= field_modifier* type variable_declarators S? ';'

field_modifier ::= ('public' | 'protected' | 'private' | 'static' | 'final'
  | 'transient' | 'volatile') S

variable_declarators ::= variable_declarator (S? ',' S? variable_declarator)*

variable_declarator ::= variable_declarator_id
  (S? '=' S? variable_initializer)?

variable_declarator_id ::= variable_declarator_id S? '[' S? ']' | identifier

variable_initializer ::= expression | array_initializer

method_declaration ::= method_header method_body

method_header ::= method_modifier* result_type method_declarator throws?

result_type ::= S? (type | 'void')

method_modifier ::= S? ('public' | 'protected' | 'private' | 'static'
  | 'abstract' | 'final' | 'synchronized' | 'native')

method_declarator ::= identifier S? '(' S? formal_parameter_list? S? ')'

method_body ::= block | S? ';'

interface_declaration ::= interface_modifier* 'interface' identifier
  extends_interfaces? interface_body

interface_modifier ::= S? ('public' | 'abstract')

extends_interfaces ::= 'extends' S?  interface_type 
  (S? ',' S? 'extends' S?  interface_type)*

interface_body ::= S? '{' S? interface_member_declaration* S? '}'

interface_member_declaration ::= constant_declaration
  | abstract_method_declaration

constant_declaration ::= constant_modifiers type variable_declarator

constant_modifiers ::= S? ('public' | 'static' | 'final')

abstract_method_declaration ::= abstract_method_modifier* result_type
  method_declarator throws? S? ';' S? 

abstract_method_modifier ::= S? ('public' | 'abstract')

array_initializer ::= S? '{'S?  variable_initializers? S? ','? S? '}'

variable_initializers ::= variable_initializer
  (S? ',' S?  variable_initializer)*

/************ Types ************/

type ::= primitive_type | reference_type

primitive_type ::= numeric_type | 'boolean'

numeric_type ::= integral_type | floating_point_type

integral_type ::= S? ('byte' | 'short' | 'int' | 'long' | 'char')

floating_point_type ::= S? ('float' | 'double')

reference_type ::= S? (class_or_interface_type | array_type)

class_or_interface_type ::= class_type | interface_type

class_type ::= type_name

interface_type ::= type_name

array_type ::= type '[' ']' 

/************ Blocks and Commands ************/

block ::= S? '{' S? block_statement* S? '}'

block_statement ::= local_variable_declaration_statement | statement

local_variable_declaration_statement ::= local_variable_declaration S? ';'

local_variable_declaration ::= type variable_declarators 

statement ::= statement_without_trailing_substatement | labeled_statement
  | if_then_statement | if_then_else_statement | while_statement
  | for_statement

statement_no_short_if ::= statement_without_trailing_substatement
  | labeled_statement_no_short_if | if_then_else_statement_no_short_if
  | while_statement_no_short_if | for_statement_no_short_if

statement_without_trailing_substatement ::= block | empty_statement
  | expression_statement | switch_statement | do_statement | break_statement
  | continue_statement | return_statement | synchronized_statement
  | throws_statement | try_statement

empty_statement ::= ';'

labeled_statement ::= identifier ':' statement

labeled_statement_no_short_if ::= identifier ':' statement_no_short_if

expression_statement ::= statement_expression ';'

statement_expression ::= assignment | preincrement_expression
  | postincrement_expression | predecrement_expression
  | postdecrement_expression | method_invocation
  | class_instance_creation_expression

if_then_statement ::= 'if' '(' expression ')' statement

if_then_else_statement ::= 'if' '(' expression ')' statement_no_short_if
  'else' statement 

if_then_else_statement_no_short_if ::= 'if' '(' expression ')'
  statement_no_short_if 'else' statement_no_short_if

switch_statement ::= 'switch' '(' expression ')' switch_block

switch_block ::= '{' switch_block_statement_group* switch_labels? '}'

switch_block_statement_group ::= switch_labels block_statement*

switch_labels ::= switch_label | switch_labels switch_label

switch_label ::= 'case' constant_expression ':' | 'default' ':'

while_statement ::= 'while' '(' expression ')' statement

while_statement_no_short_if ::= 'while' '(' expression ')' statement_no_short_if

do_statement ::= 'do' statement 'while' '(' expression ')' ';'

for_statement ::= 'for' '(' for_init? ';' expression? ';' for_update? ')'
  statement

for_statement_no_short_if ::= 'for' '(' for_init? ';' expression?
  ';' for_update? ')' statement_no_short_if

for_init ::= statement_expression_list | local_variable_declaration

for_update ::= statement_expression_list

statement_expression_list ::= statement_expression | statement_expression_list
  ',' statement_expression 

break_statement ::= 'break' identifier? ';'

continue_statement ::= 'continue' identifier? ';'

return_statement ::= 'return' expression? ';'

throws_statement ::= 'throw' expression ';' 

synchronized_statement ::= 'synchronized' '(' expression ')' block

try_statement ::= 'try' block catches | 'try' block catches? finally

catches ::= catch_clause | catches catch_clause

catch_clause ::= 'catch' '(' formal_parameter ')' block

finally ::= 'finally' block

/************ Expressions ************/

constant_expression ::= expression

expression ::= assignment_expression

assignment_expression ::= conditional_expression | assignment

assignment ::= left_hand_side assignment_operator assignment_expression

left_hand_side ::= expression_name | field_access | array_access

assignment_operator ::= '=' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<='
  | '>>=' | '>>>=' | '&=' | '^=' | '|='

conditional_expression ::= conditional_or_expression
  | conditional_or_expression '?' expression ':' conditional_expression

conditional_or_expression ::= conditional_and_expression
  | conditional_or_expression '||' conditional_and_expression

conditional_and_expression ::= inclusive_or_expression
  | conditional_and_expression '&&' inclusive_or_expression

inclusive_or_expression ::= exclusive_or_expression
  | inclusive_or_expression '|' exclusive_or_expression

exclusive_or_expression ::= and_expression
  | exclusive_or_expression '^' and_expression

and_expression ::= equality_expression
  | and_expression '&' equality_expression

equality_expression ::= relational_expression
  | equality_expression '==' relational_expression
  | equality_expression '!=' relational_expression

relational_expression ::= shift_expression
  | relational_expression '<' shift_expression
  | relational_expression '>' shift_expression
  | relational_expression '<=' shift_expression
  | relational_expression '>=' shift_expression
  | relational_expression 'instanceof' reference_type

shift_expression ::= additive_expression
  | shift_expression '<<' additive_expression
  | shift_expression '>>' additive_expression
  | shift_expression '>>>' additive_expression

additive_expression ::= multiplicative_expression
  | additive_expression '+' multiplicative_expression
  | additive_expression '-' multiplicative_expression

multiplicative_expression ::= unary_expression
  | multiplicative_expression '*' unary_expression
  | multiplicative_expression '/' unary_expression
  | multiplicative_expression '%' unary_expression

cast_expression ::= "(" primitive_type ")" unary_expression 
| "(" reference_type ")" unary_expression_not_plus_minus 

unary_expression ::= preincrement_expression
  | predecrement_expression
  | '+' unary_expression
  | '-' unary_expression
  | unary_expression_not_plus_minus

predecrement_expression ::= '--' unary_expression

preincrement_expression ::= '++' unary_expression

unary_expression_not_plus_minus ::= postfix_expression
  | '~' unary_expression | '!' unary_expression | cast_expression

postdecrement_expression ::= postfix_expression '--'

postincrement_expression ::= postfix_expression '++'

postfix_expression ::= primary | expression_name | postincrement_expression
  | postdecrement_expression

method_invocation ::= method_name '(' argument_list? ')'
  | primary '.' identifier '(' argument_list? ')' 
  | 'super' '.' identifier '(' argument_list? ')' 

field_access ::= primary '.' identifier | 'super' '.' identifier

primary ::= primary_no_new_array | array_creation_expression

primary_no_new_array ::= literal | 'this' | '(' expression ')'
  | class_instance_creation_expression | field_access | method_invocation
  | array_access

class_instance_creation_expression ::= 'new' class_type '(' argument_list? ')'

argument_list ::= expression | argument_list ',' expression

array_creation_expression ::= 'new' primitive_type dim_exprs dims?
  | 'new' class_or_interface_type dim_exprs dims?

dim_exprs ::= dim_expr | dim_exprs dim_expr

dim_expr ::= '[' expression ']'

dims ::= '[' ']' | dims '[' ']' 

array_access ::= expression_name '[' expression ']'
  | primary_no_new_array '[' expression']'

/************ Tokens ************/

S ::= ([#9#10#13 ]+ | comment)+ /* spaces or comments */

comment ::= "/*" ([^*]+ | "*" [^/])* "*/"

identifier ::= $JavaName

input_character ::= $xmlChar

escape_character ::= '\'

escape_sequence ::= '\' [nrfbt]

type_name ::= identifier ('.' identifier)*

simple_type_name ::= identifier

expression_name ::= identifier | ambiguous_name '.' identifier

method_name ::= identifier | ambiguous_name'.' identifier

ambiguous_name ::= identifier | ambiguous_name'.' identifier

literal ::= floating_point_literal | integer_literal | boolean_literal
  | character_literal | string_literal | null_literal

integer_literal ::= decimal_integer_literal | hex_integer_literal
  | octal_integer_literal

decimal_integer_literal ::= decimal_numeral integer_type_suffix?

hex_integer_literal ::= hex_numeral integer_type_suffix?

octal_integer_literal ::= octal_numeral integer_type_suffix?

integer_type_suffix ::= 'l' | 'L'

decimal_numeral ::= '0' | non_zero_digit digits?

digits ::= digit+

digit ::= '0' | non_zero_digit

non_zero_digit ::= [0-9]

hex_numeral ::= '0' [xX] hex_digit+

hex_digit ::= [0-9] | [a-f] | [A-F]
  | 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'A' | 'B' | 'C' | 'D' | 'E' | 'F'

octal_numeral ::= '0' octal_digit | octal_numeral octal_digit

octal_digit ::= [0-7] 

floating_point_literal ::= digits '.' digits? exponent_part? float_type_suffix?

digits exponent_part? float_type_suffix?

exponent_part ::= exponent_indicator signed_integer

exponent_indicator ::= [eE]

signed_integer ::= sign? digits

sign ::= '+' | '-'

float_type_suffix ::= [fFdD]

boolean_literal ::= 'true' | 'false'

character_literal ::= "'" single_character "'" | "'" escape_sequence "'"

single_character ::= [^'\]

string_literal ::= '"' string_character* '"'

string_character ::= [^"\] | escape_sequence

null_literal ::= 'null'

keyword ::= 'abstract' | 'boolean' | 'break' | 'byte' | 'case' | 'catch'
  | 'char' | 'class' | 'const' | 'continue' | 'default' | 'do' | 'double'
  | 'else' | 'extends' | 'final' | 'finally' | 'float' | 'for' | 'goto'
  | 'if' | 'implements' | 'import' | 'instanceof' | 'int' | 'interface'
  | 'long' | 'native' | 'new' | 'package' | 'private' | 'protected'
  | 'public' | 'return' | 'short' | 'static' | 'super' | 'switch'
  | 'synchronized' | 'this' | 'throw' | 'throws' | 'transient' | 'try'
  | 'void' | 'volatile' | 'while' 

/*
 * The character set for Java is Unicode, a 16-bit character set.This is the set
 * denoted by <input character>. Unicode effectively contains the familiar 7-bit
 * ASCII characters as a subset, and includes "escape code" designations
 * of the form \udddd (where each d is from <hex digit>). In the extended BNF
 * for Java the optional appearance of X is written X?, and the iterative
 * appearance of X is written {X}. 
 *
 * The syntax category <identifier> consists of strings that must start with
 * a letter - including underscore (_) and dollar sign ($) - followed by any
 * number of letters and digits. Characters of numerous international languages
 * are recognized as "letters" in Java. A Java letter is a character for which
 * the method Character.isJavaLetter returns true. A Java letter-or-digit is
 * a character for which the method Character.isJaveLetterOrDigit returns true.
 * Also, <identifier> includes none of the keywords given above - these are
 * reserved words in Java. 
 *
 * The only BNF extention used here is the optional construct which is written
 * with '?' added as a suffix to a terminal or non-terminal. Note that ' *','{',
 * and '}' are all terminal symbols. This BNF definition does not address such
 * pragmatic issues as comment conventions and the use of "white space" to
 * delimit tokens. This BNF also does not express numerous "context-sensitive"
 * restrictions on syntax. For instance, type use of identifiers must be
 * consistent with the required declarations, there are size limitations
 * on numerical literals, etc. 
 */
