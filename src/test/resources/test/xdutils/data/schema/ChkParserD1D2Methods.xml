<?xml version="1.0" encoding="windows-1250"?>
<xdef:def xmlns:xdef="http://www.syntea.cz/xdef/2.0" name="D1A_ChkParser" >
    <xdef:declaration>
<![CDATA[
      void initParams() {}
      void outputIVR(String s) {}
      void setErr(int x) {error('Error: ' + x);}
      boolean tab(String s, String t) {return true;}
      void trString(int x, int y) {}
      boolean rokVyroby(int x) {
       int i =  parseInt(getText());
       if (i < 1900 || i > 2050) return error('Error: ' + i);
       return true;
    }
      boolean ciselnikIfNum(int x, String s, String t) {return true;}
      boolean praxeRizeni(int x) {return true;}
      void setNullIfEmpty() {}
      boolean rodneCislo(int x) {if (rodneCislo()) return true; return false;}
    boolean rodneCislo() {
      String s = getText();
      int rok = parseInt(s.substring(0,2));
      int mesic = parseInt(s.substring(2,4));
      if ((mesic < 1) || ((mesic > 12) && (mesic < 51)) || (mesic > 62)) {
        return error("MYERR01",
          "Error detected by external check method: &{msg}",
          "&{msg}RC - mesic:" + mesic);
      }
      int den = parseInt(s.substring(4,6));
      if ((den < 1) || (den > 31)) {
        return error("MYERR02",
          "Error detected by external check method: &{msg}",
          "&{msg}RC - mesic:" + mesic);
      }
      int i = 6;
      if (s.substring(i, i + 1) == '/') {
        i++;
        if (s.substring(i, i + 1) == 'C')
          return true; /*cizinec*/
        }
          int n = parseInt(s.substring(i));
        if (s.length() > i + 3) {
          int mod =  n % 10;
          int num = rok*10000000+mesic*100000+den*1000+(n/10);
          if (num % 11 != mod) {
             outln('Error mod: ' + s + '; ' + mod + '/' + num % 11);
             return error("MYERR03",
                "Error detected by external check method: &{msg}",
                "&{msg}RC - CRC:" + num % 11 + "/" + mod);
              }
        }
      return true;
    }
      boolean normOkres() {return true;}
      String getIdPrace() {return "";}
      String getTab(String s, String t, String u) {return "";}
      String trCiselnikIfNum(int x, String s, String t, String u) {return "";}

      boolean tDate(int x) {return true;}
      boolean tDateTime(int x) {return true;}
      boolean tMesicSTKDo(int x) {return true;}
      String getIdPojistitel() {return "";}

      void emptySubjHasAddr(int x, String s) {}
      void setDefault_ifEx(String s, String t, String u) {}
      void setDefault_ifEx(String s, String t, String u, String v) {}
      void chkOpt_RC_ifEQ(int x, String s, String t, String u) {}
      void chk_RC_DatNar_ifEQ(int x, String s, String t, String u, String v) {}
      void dateDavka(int x) {}
      void subjekt_OsobaOrFirma(int x) {}
      void chkOpt_IC_ifEQ(int x, String s, String t, String u) {}
      void chkOpt_IC_ifEQ(int x, String s, String t, String u, String v) {}
      void chkOpt_CisloTP_ifEQ(int x, String s, String t) {}
      void chkOpt_CisloTP_ifEQ(int x, String s, String t, String u) {}
      void notEmptyMisto(int x) {}
      void equal(int x, String s, String t) {}
      boolean fil0(int x) {return true;}
      void hasElement_if(int x, String s, String t, String u) {}
      boolean kvadrant() {return true;}
      void chk_dec_nonNegative(int x) {}
      void chk_TypMinusPlneni_Platba(int x, int y, String s, String t) {}
      String getIdOsoba() {return "";}
      String getIdAdresa() {return "";}
      String getIdSubjekt() {return "";}
      String getNormalizedDec(String s) {return "";}
      String getNonEmptyAttr(String s, String t) {return "";}
      String getIdModelText(String s, String t) {return "";}
      String getTabId(String s) {return "";}
      String getSeqRec() {return "";}
      void chk_ifCond(int x, String s, String t, String u, String v, String w) {}
      void chybaNVR(String s) {}

      String getDatumdavky() {return "";}

      void datumLE(int x, String s, String t) {}
      void exactlyOneAttr(int x, String s, String t) {}
      void setNullIfZero() {}
      Element findSubjektElement() {return newElement();}
      Element findAdresaElement() {return newElement();}
      String getIdModelText2(String s, String t) {return "";}
      String getIdBarvaText(String s) {return "";}
      void chk_Subjekt(int x, int y) {}
      String modelVozidlaNeuveden() {return "";}
      void dependDruhVozidlaSPZ(int x, int y, int z, String s, String t, String u) {}
      void dependDruhVozidla(int x, int y, String s, String t) {}
      void dependDruhVozidlaMV(int x, int y, String s, String t) {}
      void datumLE_1(int x, String s, String t) {}
      void datumMaxRok(int x, String s, String t) {}
      void attrZdrojovaSmlouva(int x, String s, String t, String u) {}
      void elementErr(int x) {}
]]>
    </xdef:declaration>
</xdef:def>