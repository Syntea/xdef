/*
 * Copyright 2016 Syntea software group a.s. All rights reserved.
 *
 * File: GenDataClass.java, created 2016-06-30.
 * Package: mytest.xml
 *
 * This file may be used, copied, modified and distributed only in accordance
 * with the terms of the limited license contained in the accompanying
 * file LICENSE.TXT.
 *
 * Tento soubor muze byt pouzit, kopirovan, modifikovan a siren pouze v souladu
 * s licencnimi podminkami uvedenymi v prilozenem souboru LICENCE.TXT.
 *
 */
package cz.syntea.xdef.sys;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.nio.charset.Charset;

/** Provides generation of Java source class containing data from argument
 * (see method genClass).
 *
 * @author Vaclav Trojan
 */
public class GenDataClass {

	/** Generate the Java source class containing data from byte array.
	 * You can get stored data if you invoke static method getData() in
	 * generated class.
	 * @param data byte array from which Java source will be generated.
	 * @param dir path to directory where write the source code.
	 * @param className fully qualified class name
	 * @param charset the character set name or null (if null then it is used
	 * the system character set name).
	 * @throws IOException if an error occurs.
	 */
	public static void genClass(final byte[] data,
		final String dir,
		final String className,
		final String charset) throws IOException {
		final int BLOCKLEN = 24576;//Size of base64 string less then 32768 chars
		String pkgdir = dir;
		String clsName = className;
		File f = new File(pkgdir);
		if (f.isDirectory()) {
			if (!pkgdir.endsWith("/")) {
				pkgdir += "/";
			}
		} else {
			throw new RuntimeException("The argument \""
				+ pkgdir + "\" must be a directory!");
		}
		String pckg;
		int ndx;
		if ((ndx = clsName.lastIndexOf('.')) > 0) {
			pckg = clsName.substring(0, ndx);
			clsName = clsName.substring(ndx + 1);
		} else {
			pckg = "";
		}
		f = pckg.length() > 0 ? new File(f, pckg.replace('.', '/')) : f;
		f.mkdirs();
		String name = clsName;
		FileOutputStream fos = new FileOutputStream(new File(f, name+".java"));
		OutputStreamWriter w = charset == null || charset.length() == 0 ?
			new OutputStreamWriter(fos) : new OutputStreamWriter(fos, charset);
		w.write(
"/* NOTE: the source code was generated by cz.syntea.SYS.GenDataClass.\n"+
" * DO NOT MAKE ANY MODIFICATION!\n"+
" */\n");

		if (pckg.length() > 0) {
			w.write("package " + pckg +";\n\n");
		}
		w.write(
"/** This class contains encoded byte array.*/\n"+
"public final class " + name + " {\n"+
"\n"+
"\t/**\n"+
"\t * Get encoded data.\n"+
"\t *\n"+
"\t * @return decoded byte array.\n"+
"\t */\n");
		int codeLen = data.length;
		if (codeLen == 0) {
			w.write(
"\tpublic static final byte[] getData() {return new byte[0];}\n");
		} else if (codeLen <= BLOCKLEN) {
			w.write(
"\tpublic static final byte[] getData() {\n"+
"\t\ttry {\n"+
"\t\t\treturn cz.syntea.xdef.sys.SUtils.decodeBase64(\n\t\t\t\t\"");
			w.write(new String(SUtils.encodeBase64(data,false), "UTF-8"));
			w.write("\");\n"+
"\t\t} catch (Exception ex) {\n"+
"\t\t\tthrow new RuntimeException(ex);\n"+
"\t\t}\n"+
"\t}\n");
		} else {
			int subclassIndex = 1;
			w.write(
"\tpublic static final byte[] getData() {\n"+
"\t\ttry {\n"+
"\t\t\tbyte[] b = new byte["+codeLen+"];\n"+
"\t\t\tSystem.arraycopy(cz.syntea.xdef.sys.SUtils.decodeBase64(\"");
			w.write(new String(SUtils.encodeBase64(data,
				0, BLOCKLEN, false), "UTF-8"));
			w.write("\"), 0, b, 0, "+BLOCKLEN+");\n");
			int offset = BLOCKLEN;
			for (int i = 1; offset < codeLen; i++, offset += BLOCKLEN) {
				int len = codeLen-offset>=BLOCKLEN ? BLOCKLEN : codeLen-offset;
				w.write(
"\t\t\tSystem.arraycopy(cz.syntea.xdef.sys.SUtils.decodeBase64(C"
					+ i + ".x()), 0, b, " + offset + ", "+len+ ");\n");
			}
			w.write(
"\t\t\treturn b;\n"+
"\t\t} catch (Exception ex) {\n"+
"\t\t\tthrow new RuntimeException(ex);\n"+
"\t\t}\n"+
"\t}\n"+
"\n");
			offset = BLOCKLEN;
			while (offset < codeLen) {
				String s =
"\tprivate static final class C" + subclassIndex + "{"+
"private static String x(){return \"";
				if (BLOCKLEN + offset < codeLen) {
					w.write(s);
					w.write(new String(SUtils.encodeBase64(
						data, offset, BLOCKLEN, false),
						Charset.forName("UTF-8")));
					w.write("\";}");
					if (subclassIndex > 0) {
						w.write("}");
					}
					w.write("\n");
					subclassIndex++;
					offset += BLOCKLEN;
				} else if (offset < codeLen) {
					w.write(s);
					w.write(new String(SUtils.encodeBase64(
						data, offset, codeLen - offset, false),
						Charset.forName("UTF-8")));
					offset = codeLen;
					w.write("\";}");
					if (subclassIndex > 0) {
						w.write("}");
					}
					w.write("\n");
					subclassIndex++;
				}
			}
		}
		w.write("}");
		w.close();
	}
}
