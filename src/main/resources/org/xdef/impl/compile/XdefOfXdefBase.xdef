<!-- Common base types and BNF grammar of of the X-script.
 The meta namespace of X-definition ("METAXD" is http://www.xdef.org/xdef/4.0).
 -->
<xd:def xmlns:xd  = "METAXD"
  xmlns:XD2.0     = "http://www.syntea.cz/xdef/2.0"
  xmlns:XD3.1     = "http://www.syntea.cz/xdef/3.1"
  xmlns:XD3.2     = "http://www.xdef.org/xdef/3.2"
  xmlns:XD4.0     = "http://www.xdef.org/xdef/4.0"
  xmlns:w         = "http://www.xdef.org/xdef/4.0"
  xd:root         = "Ver2.0#XD2.0:def | Ver2.0#XD2.0:collection
                     | Ver3.1#XD3.1:def | Ver3.1#XD3.1:collection
					 | Ver3.1#XD3.1:declaration | Ver3.1#XD3.1:component 
                     | Ver3.1#XD3.1:thesaurus
                     | Ver3.2#XD3.2:def | Ver3.2#XD3.2:collection 
					 | Ver3.2#XD3.2:declaration | Ver3.2#XD3.2:component 
                     | Ver3.2#XD3.2:lexicon
                     | Ver4.0#XD4.0:def | Ver4.0#XD4.0:collection 
					 | Ver4.0#XD4.0:declaration | Ver4.0#XD4.0:component 
                     | Ver4.0#XD4.0:lexicon"
  w:metaNamespace = "METAXD">

<xd:declaration>
  /* Default namespace of XDefinition */
  String xdUri;
  /* Variable id used as the namespace of checked source; default is xdUri.*/
  String NS;

/******************************************************************************/
/* Types of values see BNF grammar below                                      */
/******************************************************************************/
  type rootList XDScript.rule('RootList');
  type xdefScript XDScript.rule('XdefScript');
  type declarationScript XDScript.rule('DeclarationScript');
  type valueScript XDScript.rule('ValueScript');
  type attributeScript XDScript.rule('AttributeScript');
  type elementScript XDScript.rule('ElementScript');
  type groupScript XDScript.rule('ElementScript');
  type groupModelScript XDScript.rule('ElementScript');
  type Occurrence XDScript.rule('Occurrence');
  type elementCreateSection XDScript.rule('ElementCreateSection');
  type elementCreateCode XDScript.rule('ElementCreateCode');
  type xdIdentifier XDScript.rule('Identifier');
  type xposition XDScript.rule('XPosition');
  type booleanLiteral XDScript.rule('BooleanLiteral');
  type bnfGrammar XDScript.rule('BNFGrammar');
  type xcomponent XDScript.rule('XCComponent');
  type languageId XDScript.rule('LanguageId');
  type yesNo XDScript.rule('YesNo');
  type thesaurus XDScript.rule('Lexicon');
  type json XDJson.rule('json');

  /** Check element name and namespace URI (used in the match section) */
  boolean xdName(String name) {
    return getElementLocalName() EQ name AND getNamespaceURI() EQ NS;
  }
</xd:declaration>

/******************************************************************************/
/* Declaration of BNF grammar for X-Script                                    */
/******************************************************************************/

  <xd:BNFGrammar name = "XDScript">
<![CDATA[
/******************************************************************************/
/* x-Script BNF grammar rules                                                          */
/*                                                                            */
/* Note the inline BNF method "$rule" is used to generate code for the        */
/* compiler of X-definitions. To understand the syntax you can simply         */
/* ignore them.                                                               */
/******************************************************************************/

Letter ::= $letter /* any letter.*/

Char ::= $xmlChar /* any XML character.*/

WhiteSpace ::= [#9#10#13 ]

Comment ::= "/*" ([^*]+ | "*" - "*/")* "*/"

S ::= (WhiteSpace | Comment)+ /* Sequence of whitespaces or comments */

Digit ::= [0-9]

HexaDigit ::= Digit | [a-fA-F]

SemicolonOrSourceEnd ::= S? (";" S? | $eos)
/* At the end of the parsed source text the semicolon is not required. */

/* Keywords of the X-script */
Keyword ::= "if" | "else" | "do" | "while" | "continue" | "break" | "switch"
  | "case" | "for" | "return" | "def" | "try" | "catch" | "throw" | "finally"
  | "external" | "new" | "fixed" | "required" | "optional" | "ignore"
  | "illegal" | "occurs" | "onTrue" | "onError" | "onAbsence" | "default"
  | "onExcess" | "onStartElement" | "onIllegalAttr" | "onIllegalText" | "var"
  | "onIllegalElement" | "onIllegalRoot" | "create" | "init" | "options"
  | "ref" | "match" | "final" | "forget" | "template" | "type" | "uniqueSet"
  | "EQ" | "NE" | "LT" | "LE" | "GT" | "GE"
  | "LSH" | "RSH" | "RRSH" | "AND" | "OR" | "XOR" | "MOD" | "NOT" | "NEG"
  | "OOR" | "AAND"
  | "true" | "false" | "implements" | "extends"
  | "onFalse"

/* Predefined constants */
PredefinedConstant ::= ("$MAXFLOAT" | "$MAXINT" | "$MININT" | "$MINFLOAT" |
  "$PI" |"$E" | "$NEGATIVEINFINITY" | "$POSITIVEINFINITY" | "null") $rule

Identifier ::= BaseIdentifier - Keyword
  /* Identifier ::= BaseIdentifier (':' BaseIdentifier)? ) - Keyword */

LanguageId ::= [a-z] {2,3}

YesNo ::= "yes" | "no"

BaseIdentifier ::= ((Letter | "_" | "$")  (Letter | Digit | "_")* )

RawIdentifier ::= (Letter | "_")  (Letter | Digit | "_")*

QualifiedIdentifier ::= BaseIdentifier ("." BaseIdentifier)+ | BaseIdentifier

BooleanLiteral ::= ("true" | "false") $rule

DecimalInteger ::= ("_"* Digit+)+ ("_")*

IntegerLiteral ::= (("0" [Dd])? DecimalInteger
  | "0" [Xx] ("_"* HexaDigit+)+ ("_")*) $rule
  /* Inside a number specification it is possible to insert the character "_".
    This character does not influence the value of the number, it just makes
    a number more readable. E.g. the number 123456789 you can be written
    as 123_456_789 (or 0x0f123456 as 0x0f_12_34_56). */

FloatLiteral ::= (("0" [Dd]) DecimalInteger "." DecimalInteger? )
  | ((DecimalInteger ("." DecimalInteger Exponent? | Exponent))) $rule

Exponent ::= [Ee] [-+]? [0-9]+

NumberLiteral ::= FloatLiteral | IntegerLiteral

SpecChar ::= "\" ("\" | '"' | "'" | "n" | "r" | "t") | UnicodeCharSpecification

UnicodeCharSpecification ::= "\u" HexaDigit{4}

StringLiteral ::= ("'" ("''" | [^'\] | SpecChar)* "'" |
  '"' ('""' | [^"\] | SpecChar)* '"') $rule
  /* The opening and closing delimiter must be either """ or "'". The occurrence
     of this delimiter inside of literal can be recorded as double delimiter or
     in the form of SpecChar. */

Literal ::= BooleanLiteral | NumberLiteral | StringLiteral

XMLName ::= $xmlName /* XMLName see XML specification */

KeyName ::= "%" XMLName

AttributeName ::= "@" XMLName

Reference ::= "ref" S XPosition

XDefName ::= XMLName

XModelName ::= XMLName

XPosition ::= (XDefName? "#")? XModelName
  ("/" (XMLName | XGroupRererence | XAnyReference) XPositionIndex?)*
  ("/" (XAttrReference | XTextReference))?

XPositionIndex ::= "[" Digit+ "]"

XGroupRererence ::= "$mixed" | "$choice" | "$sequence"

XAnyReference ::= "$any"

XAttrReference ::= "@" XMLName

XTextReference ::= "$text" XPositionIndex?

RootList ::= S? RootSpecification (S? "|" S? RootSpecification)* S?
  /* all rootspecification in the list must be unique */

RootSpecification ::= XPosition | "*"

ExternalType ::= QualifiedIdentifier (S?"[" S? "]")?

MethodListItem ::= ExternalType S?
  QualifiedIdentifier S? "(" S? MethodListItemParamList? S? ")" S?
  ("as" S? Identifier)?

MethodListItemParamList ::= ExternalType
  (S? "," S? QualifiedIdentifier (S?"[" S? "]")? )*

MacroReference ::= "$" "{" S? XMLName S? MacroParams? S? "}"

MacroParams ::= "(" S? Identifier (S? "," S? Identifier)* S? ")"

/******************************************************************************/
/* Script expression                                                          */
/******************************************************************************/

Expression ::= Expr1 (S? "?" S? Expression S? ":" S? Expression)?

OperatorLevel_1 ::= ("AND" | "AAND" | "&&" | "&") $rule

Expr1 ::= Expr2 (S? OperatorLevel_1 S? Expr2)*

OperatorLevel_2 ::= ("OR" | "OOR" | "XOR" | "||" | "|" | "^") $rule

Expr2 ::= Expr3 (S?  OperatorLevel_2 S? Expr3)*

OperatorLevel_3 ::= ("LT" | "<" | "GT" | ">" | "==" | "EQ" | "LE"
  | "<=" | "GE" | ">=" | "!=" | "NE" | "<<" | "LSH" | ">>" | "RSH" | ">>>"
  | "RRSH") $rule

Expr3 ::= Expr4 (S? OperatorLevel_3 S? Expr4)*

OperatorLevel_4 ::= ("*" | "/" | "%") $rule

Expr4 ::= Expr5 (S? OperatorLevel_4 S? Expr5)*

OperatorLevel_5 ::= ("+" | "-") $rule

Expr5 ::= Expr (S? OperatorLevel_5 S? Expr)*

Expr ::= (UnaryOperator S? | CastRequest S?)*
  (Value | Literal | "(" S? Expression S? ")") (S? "." S? Method)?

ConstantExpression ::= Literal /* ConstantExpression must be a Literal. */

CastRequest ::= S? "(" S? $rule TypeIdentifier S? ")" S?

UnaryOperator ::= "+" | ("-" | "!" | "NOT" | "~") $rule

TypeIdentifier ::= ("int" | "String" | "float" | "boolean" | "Datetime"
  | "Decimal" | "Duration" | "Exception" | "Container" | "Element" | "Message"
  | "Bytes" | "XmlOutStream" | "BNFGrammar" | "BNFRule" | "Parser" | "Service"
  | "ResultSet" | "Statement" | "ParseResult" | "Locale" | "AnyValue"
  | "Output" | "Input" | "NamedValue" ) $rule

Value ::= (Constructor | PredefinedConstant | Increment
  | Method | VariableReference | KeyParameterReference | Literal | AttributeName
  | $rule AssignmentStatement) (S? "." S? Method)?

NewValue ::= "new" S $rule TypeIdentifier S? ParameterList

Constructor ::= NewValue | NamedValue | ContainerValue

NamedValue ::= KeyName S? "=" S? Expression

ContainerValueStart ::= (NamedValue (S? "," S? NamedValue)* ) | Expression

ContainerValue ::= "[" S? (ContainerValueStart (S? "," S? Expression)* )? S? "]"

KeyParameterReference ::= KeyName

Method ::= (SchemaTypeName | (QualifiedIdentifier - Keyword)) $rule
  S? ParameterList?

SchemaTypeName ::= "xs:" Identifier /* prefix “xs:” is deprecated */

incAfter ::= ("++" | "--") S? $rule VariableReference
incBefore ::= VariableReference S? ("++" | "--") S? $rule

Increment ::= incAfter | incBefore
  /* The type VariableReference must be an integer or a float */

Parameter ::= Expression $rule

ParameterList ::= "(" S? (Parameter
   (S? "," S? Parameter)* (S? "," S? "*")? S?)? ")" $rule

VariableReference ::= (Identifier - TypeIdentifier) $rule

MethodDeclaration ::= ("void" | TypeIdentifier) $rule
  S DeclaredMethodName S? ParameterListDeclaration S? Block

DeclaredMethodName ::= Identifier $rule

ParameterListDeclaration ::=
  "(" S? (SeqParameter (S? "," S? SeqParameter)* )? ")" $rule

SeqParameter ::= TypeIdentifier S ParameterName

KeyParameter ::= KeyName S? "=" S? (TypeIdentifier | ConstantExpression)

ParameterName ::= Identifier

ParentalExpression ::= S? "(" S? Expression S? ")" S?

StatementExpression ::= Expression

/******************************************************************************/
/* Script statement                                                           */
/******************************************************************************/

Statement ::= S? (Statement1 | Statement2)

Statement1 ::= (Block | SwitchStatement | TryStatement)

Statement2 ::= (IfStatement | ForStatement | WhileStatement | DoStatement
  | ReturnStatement | ThrowStatement | BreakStatement | ContinueStatement
  | Method | Increment | AssignmentStatement S? (";" S? | $eos)? )
  $info | EmptyStatement

EmptyStatement ::= ";"

StatementSequence ::= (S? VariableDeclaration S? ";" S? | Statement)*

Block ::= "{" StatementSequence S? "}"

SimpleStatement ::= S? (Statement1 | (Statement2? S? ";" S?)) | EmptyStatement

IfStatement ::= "if" ParentalExpression SimpleStatement
  (S? "else" S? SimpleStatement)?
  /* Result of ParentalExpression must be boolean. */

ForStatement ::= "for" $rule S? "(" S? ForInit? S? ";" S?
  ForBooleanExpression? S? ";" S? ForStep? S? ")" S? SimpleStatement

ForBooleanExpression ::= $rule Expression

ForInit ::= $rule (AssignmentStatement | VariableDeclaration)

ForStepStatement ::= $rule (Method | Increment | AssignmentStatement)

ForStep ::= ForStepStatement (S? "," S? ForStepStatement)*

WhileStatement ::= "while" $rule ParentalExpression SimpleStatement
  /* Result of ParentalExpression must be boolean. */

DoStatement ::= "do" S? $rule Statement S? "while" ParentalExpression
  /* Result of ParentalExpression must be boolean. */

WhilBooleanExpression ::= $rule ParentalExpression

SwitchStatement ::=
  "switch" $rule ParentalExpression "{" SwitchBlockStatementVariant* S? "}"
  /* Result of ParentalExpression must be integer. Any variant may occur in the
     switch statement only once. */

SwitchBlockStatementVariant ::=
   S? (DefaultVariant | CaseVariant) S? ":" S? StatementSequence?
  /* Type  of ConstantExpression must be integer. */

DefaultVariant ::= "default" S? $rule

CaseVariant ::= "case" S?  $rule ConstantExpression

ThrowStatement ::= "throw" S? $rule ExceptionValue

ExceptionValue ::= NewException | Identifier

NewException ::= "new" S? $rule "Exception" S? "(" S? (Expression S?)? ")"

TryStatement ::= "try" S? $rule "{" S? StatementSequence S? "}"
  S? CatchStatement

CatchStatement ::=
  "catch" S? $rule "(" S? "Exception" S?  Identifier S? ")" S?
  "{" S? StatementSequence S? "}"

ReturnStatement ::= "return" $rule (S? Expression)?

BreakStatement ::= "break" $rule (S? Identifier)?

ContinueStatement ::= "continue" $rule (S? Identifier)?

AssignmentStatement ::= (Identifier S? ((AssignmentOperator S? Expression) |
 (("=" S? Identifier))+ S? (AssignmentOperator S? Expression)) |
  S? AssignmentOperator S? Expression)

AssignmentOperator ::= (("|" | "^" | "+" | "-" | "*" | "/" | "&"
  | "%" | "<<" | ">>>" | ">>")? "=") $rule

VariableModifier ::= ("final" | "external") $rule S

VariableDeclaration ::= VariableModifier*
  TypeIdentifier S VariableDeclarator (S? "," VariableDeclarator)*

VariableDeclarator ::= S? (AssignmentStatement | Identifier)

Occurrence ::= ("required" | "optional" | "ignore" | "illegal" | "*"
  | "+" | "?" | (("occurs" S)? ("*" | "+" | "?" |
  (IntegerLiteral (S? ".." (S? ("*" | IntegerLiteral))? )? )))) $rule
  /* The value of the second IntegerLiteral (after "..")  must be greater or
     equal to the first one. */

ExplicitCode ::= Block
  /* If result value is required it must be returned by the command "return" */

/******************************************************************************/
/* Script of X-definition header                                              */
/******************************************************************************/

XdefScript ::=
  (S? (XdefInitSection | XdefOnIllegalRoot | XdefOnXmlError | XdefOptions)* S?)?
  /* Each item can be specified only once. */

XdefInitSection ::= "init" S Statement

XdefOnIllegalRoot ::= "onIllegalRoot" S Statement

XdefOnXmlError ::= "onXmlError" S Statement

XdefOptions ::= "options" S XdefOptionsList

XdefOptionsList ::= XdefOptionItem (S? "," S? XdefOptionItem)*
  /* Each item can be specified only once. */

XdefOptionItem ::= "moreAttributes" | "moreElements" | "moreText"
  | "forget" | "notForget" | "clearAdoptedForgets"
  | "resolveEntities" | "ignoreEntities" | "resolveIncludes" | "ignoreIncludes"
  | "preserveComments" | "ignoreComments" | "acceptEmptyAttributes"
  | "preserveEmptyAttributes" | "ignoreEmptyAttributes"
  | "preserveAttrWhiteSpaces" | "ignoreAttrWhiteSpaces"
  | "preserveTextWhiteSpaces" | "ignoreTextWhiteSpaces"
  | "setAttrUpperCase" | "setAttrLowerCase"
  | "setTextUpperCase" | "setTextLowerCase"
  | "acceptQualifiedAttr" | "notAcceptQualifiedAttr"
  | "trimAttr" | "noTrimAttr" | "trimText" | "noTrimText"
  | "resolveEntities" | "ignoreEntities"
  | "resolveIncludes" | "ignoreIncludes"
  | "preserveComments" | "ignoreComments"

/******************************************************************************/
/* Script of text nodes and attributes                                        */
/******************************************************************************/

AttributeScript ::= (ValueExecutivePart* S?)?

ValueScript ::= (ValueExecutivePart* S?)?

ValueExecutivePart ::= "$$$script:"? S?
  (ValueValidationSection | ValueInitSection | ValueOnTrueSection
  | ValueOnErrorSection | ValueOnAbsenceSection | ValueDefaultSection
  | ValueCreateSection | ValueFinallySection | ValueMatchSection
  | AttributeOptions | Reference | AttributeOnStartSection | S | ";") S?
  /* Each item can be specified only once. */

AttributeOnStartSection ::= "onStartElement" S? Statement?

FixedModifier ::= "fixed" S $rule

ValueValidationSection ::= FixedModifier (Expression | Block)
  | (Occurrence S? CheckValueSpecification?) | CheckValueSpecification

CheckValueSpecification ::= ExplicitCode | ValidationExpression | TypeMethodName
  /* ExplicitCode must return a value of boolean type or ParseResult. */

ValidationExpression ::= ValidationMethod | Expression
  /* Result of ValidationExpression must be a boolean or ParseResult type. */

ValidationMethod ::= SchemaValidationMethod | XDValidationMethod

SchemaValidationMethod ::= ParseMethod

XDValidationMethod ::= ParseMethod

ParseMethod ::= Method

TypeMethodName ::= Identifier

ValueMatchSection ::= "match" S? (Expression | ExplicitCode)
  /* Expression nebo ExplicitCode must here return a value of boolean type. */

ValueInitSection ::= "init" S? (ExplicitCode | Statement)

ValueOnTrueSection ::= "onTrue" S? (ExplicitCode | Statement)
  /* If Method or ExplicitCode returns a value, it will be ignored. */

ValueOnErrorSection ::= ("onError" | "onFalse") S? (ExplicitCode | Statement)

ValueOnAbsenceSection ::= "onAbsence" S (ExplicitCode | Statement)

ValueCreateSection ::= "create" S? (ExplicitCode | ValueCreateExpression)
  /* ExplicitCode must return a value of String type. */

ValueCreateExpression ::= Expression
  /* ValueCreateExpression must return a value of String type. */

ValueDefaultSection ::= "default" S? (ExplicitCode | Expression)
  /* Expression nebo ExplicitCode must return the value of the String. */

ValueFinallySection ::= "finally" S? (ExplicitCode | Statement)

AttributeOptions ::= ValueOptions

ValueOptions ::= "options" S? ValueOptionsList

ValueOptionsList ::=  ValueOption (S? "," S? ValueOption)*
  /* Each item can be specified only once. */

ValueOption ::= "preserveTextWhiteSpaces" | "ignoreTextWhiteSpaces"
  | "setTextUpperCase" | "setTextLowerCase" | "trimText" | "noTrimText"
  | "preserveAttrWhiteSpaces" | "ignoreAttrWhiteSpaces" | "cdata"
  | "setAttrUpperCase" | "setAttrLowerCase" | "trimAttr" | "noTrimAttr"
  | "ignoreEmptyAttributes" | "acceptEmptyAttributes"
  | "acceptQualifiedAttr" | "notAcceptQualifiedAttr" | "preserveTextCase"

/******************************************************************************/
/* Script of elements                                                         */
/******************************************************************************/

ElementScript ::= $info ElementExecutivePart* S?

ElementExecutivePart ::= "$$$script:"? S? (TemplateSection | Occurrence
  | ElementVarSection | ElementMatchSection | ElementInitSection
  | ElementOnAbsenceSection | ElementOnExcessSection | ElementCreateSection
  | ElementFinallySection | ElementOptions | Reference | ElementForgetSection
  | ElementOnStartSection | ElementStructureCompare | ";")


  /* Each item can be specified only once.
   * If the occurrence is not specified, the implicite value is "required" */

TemplateSection ::= "template"

ElementVarSection ::= "var" S?
  (("{"(S? ElementVarSectionItem S?)* "}") | ElementVarSectionItem S?)

ElementVarSectionItem ::= TypeDeclaration | VariableDeclaration S? ";"  | S? ";"

ElementInitSection ::= "init" S? Statement?

ElementMatchSection ::= "match" S? (Expression | ExplicitCode)
  /* Expression nebo ExplicitCode must here return a value of boolean type. */

ElementOnStartSection ::= "onStartElement" S? Statement?

ElementOnExcessSection ::= "onExcess" S? Statement?

ElementOnAbsenceSection ::= "onAbsence" S? Statement?

ElementCreateSection ::= "create" ElementCreateCode

ElementCreateCode ::= S? (Expression | ExplicitCode) S?
  /* Expression nebo ExplicitCode must return value of Container or Element. */

ElementFinallySection ::= "finally" S? Statement?

ElementForgetSection ::= "forget"

ElementStructureCompare ::= ("implements" | "uses") S XPosition

ElementOptions ::= "options" S? ElementOptionsList

ElementOptionsList ::=  ElementOptionItem (S?  "," S? ElementOptionItem)*
  /* Each item can be specified only once. */

ElementOptionItem ::= "moreAttributes" | "moreElements" | "moreText"
  | "forget" | "notForget" | "acceptEmptyAttributes" | "clearAdoptedForgets"
  | "preserveEmptyAttributes" | "ignoreEmptyAttributes"
  | "preserveAttrWhiteSpaces" | "ignoreAttrWhiteSpaces"
  | "preserveTextWhiteSpaces" | "ignoreTextWhiteSpaces" | "setAttrUpperCase"
  | "setAttrLowerCase" | "setTextUpperCase" | "setTextLowerCase"
  | "acceptQualifiedAttr" | "notAcceptQualifiedAttr" | "trimAttr" | "noTrimAttr"
  | "trimText" | "noTrimText" | "resolveEntities" | "ignoreEntities"
  | "resolveIncludes" | "ignoreIncludes" | "preserveComments" | "ignoreComments"
  | "preserveTextCase" | "acceptOther" | "ignoreOther"
  | "nillable" | "noNillable"

/******************************************************************************/
/* Script of the declaration part                                             */
/******************************************************************************/

DeclarationScript ::= (S? (TypeDeclaration | ExternalMethodDeclaration
  | VariableDeclaration | MethodDeclaration | ";"))* S?

TypeDeclaration ::= ("type" S Identifier S?
  ((Identifier (S? "," S? Identifier)* S? ";" S? )
  | TypeDeclarationBody)) | UniqueSetDeclaration

TypeDeclarationBody ::= TypeExplicitCode | Expression
  /* Expression or TypeExplicitCode must return either
     a boolean or a ParseResult value.*/

TypeExplicitCode ::= /* X-defintion version 2.0 */
  ("{" S? "parse" S? ":" S? (ExplicitCode | Statement ";"?) S? "}") 
  | /* X-defintion version 3.1 and higher */ ExplicitCode

ExternalMethodDeclaration ::= "external" S "method"
  ( S? "{" S? (MethodListItem S? ";" S? )* MethodListItem? S? ";"? S? "}"
  | (S MethodListItem) ) S? ";"?

UniqueSetDeclaration ::= "uniqueSet" S Identifier S? UniqueSetDeclarationBody

UniqueSetDeclarationBody ::=
  ("{" UniqueSetItem (S?";" UniqueSetItem)* (S?";"S?)? S? "}") | Method
  /* The method must be a parser. */

UniqueSetItem ::= S? (UniqueSetVar | UniqueSetKey)

UniqueSetKey ::= S? Identifier (S?":"S? (("?" | "optional") S? )? Method )?
  /* The method must be a parser. */

UniqueSetVar ::= S? "var" S TypeIdentifier S Identifier
  (S? "," S? TypeIdentifier S Identifier)*

/******************************************************************************/
/* BNF grammar                                                                */
/******************************************************************************/

BNFGrammar ::= S? BNFMethodDeclarationSection? BNFRules S?

BNFMethodDeclarationSection ::= BNFMethodDeclaration (S? BNFMethodDeclaration)*

BNFRuleName ::= RawIdentifier

BNFDefinedMethodName ::= "$" (BNFRuleName | Digit+)

BNFRuleDecl ::= S? BNFRuleName S? "::=" S?

BNFRuleReference ::= BNFDefinedMethodName | (BNFRuleName - BNFRuleDecl)

BNFMethodDeclaration ::= "%define" S BNFDefinedMethodName S? ":"
  S ("$" QualifiedIdentifier | BNFDefinedMethodName) S? BNFMethodparameters?

BNFMethodparameters ::= "(" S?
  (BNFMethodparameter (S? "," S? BNFMethodparameter)* ) ? S? ")"

BNFMethodparameter ::= Digit+ | BNFTerminalSymbol

BNFTerminalSymbol ::= "'" [^']* "'" | '"' [^"]* '"'
  | (BNFHexaCharacter (S? BNFHexaCharacter)* )

BNFHexaCharacter ::= "#" HexaDigit+

BNFRules ::= BNFRule (BNFRule)*

BNFRule ::= BNFRuleDecl BNFExpression

BNFQuantifier ::= S? ("+" | "*" | "?" | BNFExplicitQuantifier)

BNFExplicitQuantifier ::= "{" S? Digit+ (S? "," S? Digit+)? S? "}"

BNFSet ::= "[" ("^"? Char - "]")* "]" BNFQuantifier?

BNFTerm ::= (BNFTerminalSymbol | BNFSet | BNFRuleReference) BNFQuantifier?
  | BNFParentalExpr

BNFParentalExpr ::= "(" S? BNFExpr S? ")" S? BNFQuantifier?

BNFSequence ::= BNFTerm (S? BNFTerm)*

BNFRestriction ::= BNFSequence (S? "-" S? BNFTerm)?

BNFExpr ::= BNFRestriction (S? "|" S? BNFRestriction)*

BNFExpression ::= (BNFExpr S?)+

/******************************************************************************/
/* XComponent                                                                 */
/******************************************************************************/

JavaTypeName ::= '<' S? $JavaQName (S? JavaTypeName)?
  (S? "," S?  JavaTypeName)* S? '>'

JavaTypedQName ::= $JavaQName (S? JavaTypeName)?

XCComponent ::= S? (XCComponentCommand
  (S? ";" S? XCComponentCommand?)* )

XCComponentCommand ::= (XCBind | XCClass | XCEnum | XCInterface | XCRef)

XCBind ::= "%bind" S XMLName (S "%with" S $JavaQName)? S XCLink

XCClass ::= "%class" S JavaTypedQName (S "extends" S JavaTypedQName)?
  (S "implements" S JavaTypedQName (S? "," S? JavaTypedQName)* )?
  (S "%interface" S JavaTypedQName)? S XCLink

XCEnum ::= "%enum" S JavaTypedQName S (Identifier? "#")? XMLName

XCInterface ::= "%interface" S $JavaQName S XCLink

XCRef ::= "%ref" S ((JavaTypedQName S XCLink)
  | ("%enum" S JavaTypedQName S (Identifier? "#")? XMLName))

XCLink ::= "%link" S ("*" | XPosition)

Lexicon ::= (S? $rule XPosition S? "=" S? XMLName)* S?
]]>
  </xd:BNFGrammar>

/******************************************************************************/
/* Declaration of BNF grammar for JSON                                        */
/******************************************************************************/
  <xd:BNFGrammar name = "XDJson">
<![CDATA[
/******************************************************************************/
/* JSON BNF grammar rules                                                     */
/******************************************************************************/

WhiteSpace ::= [#9#10#13 ]

Comment ::= "/*" ([^*]+ | "*" - "*/")* "*/"

S ::= (WhiteSpace | Comment)+ /* Optional sequence of whitespaces or comments */

boolean ::= "true" | "false"

number ::= int frac exp | int frac | int exp | int

int ::= "-"? digits

digits ::= [0-9]+

frac ::= "." digits

exp ::= [eE] ("+" | "-")? digits

controlcharacter ::= '\"' | '\\' | '\/' | '\b' | '\f' | '\n' | '\r' | '\t' |
  ('\u' [0-9a-fA-F]{4})

string ::= ('"' ([^\"] | controlcharacter)* '"' |
  "'" ([^\'] | controlcharacter)* "'")

xdscript ::= S? ( ("$script" S? ":" S? string)
  | ( "$oneOf" (S? ":" S? string)? ) ) (S? ",")?

object ::= "{" xdscript? (members)* S? "}"

members ::= S? pair (S? "," S? pair)*

pair ::= string S? ":" S? value

array ::= "[" xdscript? S? list? S? "]"

list ::= value (S? "," S? value )*

value ::= S? (pair | "null" | boolean | number | string | array | object) S?

json ::= S? (array | object)

]]>
  </xd:BNFGrammar>

</xd:def>